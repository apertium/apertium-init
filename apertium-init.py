#!/usr/bin/env python3

__author__ = 'Sushain K. Cherivirala, Kevin Brubeck Unhammer'
__copyright__ = 'Copyright 2014--2018, Sushain K. Cherivirala, Kevin Brubeck Unhammer'
__credits__ = ['Sushain K. Cherivirala', 'Kevin Brubeck Unhammer', 'Jonathan North Washington', 'Shardul Chiplunkar']
__license__ = 'GPLv3+'
__status__ = 'Production'
__version__ = '2.1.4'

import argparse
import base64
import getpass
import json
import os
import re
import shlex
import stat
import subprocess
import sys
import urllib.request
import zlib

if False:  # for mypy
    import http.client  # noqa: F401
    from typing import Dict, List, Tuple  # noqa: F401

# DO NOT MODIFY, USE `make` which calls `./updateBoostraper.py`
any_module_files = {'.gitattributes': b'c%0MHOUbNI$jQu0FU>42(alK&G7{5MZ6kbr5TYrmC8^0JiAg!Bwk1WSsa#rmIYs1XDkeiy30az=qpeah(=$t~Vq;0x4glQWW#I', '.gitignore': b'c$`H}I}U>|4Bc}SB%Fl{RO(WRcA+~8i2<wmAe<~ceI2UO<$bJY`{@QIib^-I&YUYR?~0+TxLKv)I*db3J1Tv949`p7D}6UFoXO)~K|Nx&k)rj*A($Yx<P^G$V2xcRYg3$Q0iTvrb2ho~&zAaxq71!nc~v?PGewDq<dBbEB7|G%wx>zjIo!_uqr_LL4|P67`v', 'AUTHORS': b'c$@<O00001', 'autogen.sh': b'c${UEQE%En49B0jPvHgBsR+nB2x*k99U58@o3!l-nZzNdrgz!hr3F>&v(I;FLkjm2*=PUk``hV$fOsoaY;z&Hu*ksW1eGNNwxmR6l2Skz4ogFs+z-Iv191$x0cZ|2&(adal{Imp6D(qeNE;w2Wmpw%Bv$J$w~OD?Q;?`(iuP`rVPQ#R+JFS9AnJXJCXi|Yd=g}K&-;Vv&s!tY{&lC*1^QcYK3FQzprdpwIzH;PV$^$)-Tw3#)!xbE0uvy%#Dp#wtsb4J=mOEdu3f!TAY5IYO3TQb7cXsN$YLT=t;kFNgItiUM3-AoL@6u3JwPG1PU|8rA9lk;t4!`<OoEI+E*Zhif%VDA7^!xQVZ<YBS-2FmYTgNhFjLFQs*etGeBvQ$pj0~e7mqkTH_ZA)oKzebgJnr79e~v!GhTqO5jnEd`jP6%hqsX-mCzt;1U$>40R7~9Nr~q^`}x(+z<-b9){gMLMS}LFHV*uySbp9t7dPwK`p@Pq>CAN;Gbc!Uj9HN;{VYtZzTIu+_up?9cMa*x)h5{-4S8j2Vc*v{`A^NhM~T^dc|V^mn^JB2vd-(+8d^JA_!U^8wSH>IGNRd8Kcc#W%8<ayX+z$IVJ7`@jpF7u{5V4V2W@pN2m', 'COPYING': b'c$~#uTXWmSl763Gf#Qp$Dp-z_bCNxADpj;h$J`@JT1mE#-xef>BGw?l#YHst*KdE_Jr{talG>L|?bfj*V5X<1?>8jL;eUTze@gzCUC-{OSIO<Cw^#Gag#LeaeLpitp2mNlZPONYmHd<@KmH^6_r9{pk3anIi!sS%z1=s(<GM@EF3<Uw$@|9I<i1{YyR5Ov`?|04tfRNnWL_;VlHb-{xBd0it5v(YsGG-Eznf(CWSf0WixzFNwaupJI-4h5oh)hfB&+fyFWRmt7JX+EdUiqUZScp!wkD}pNw=mq%VKG()+Twq>^HXR(uAH*mg}r~EUL$(=&*cMcS%;3_0HxO=G1ZdzuU%Un?-5y)Wg~e)@)^)tW0kE1?`qx>5jB+maOR5DMMV^Rp+5u)s1N#GH{f-TiYi2R#bTl(06t7t-WxY=vysbOEz`eB}d-fHrcW(mIMdCoZzpyZHvds=7zA=W#8!WUA9m5b>A>xdA$KX+qGMX(P9a4Rv}1|w|j!V>YA+WQq%qEiHoYURWA4R*k?^fKilz+=3qxcKCTet#OKfGIQ3(bZC<{lg*E`a?dcV|uEuV%f}X;10f)d07Ad+m>04TfK>tFR2gIjIkDkO6=9x2jloM1qh1>BBV9B=IlBkV#Zfl$?tM+;uKp%lx+N=dKK#4&8V$Tp}eYdU|#;<jsEVGJN!r!n8V@uE9(h=&KDdEf7R>_VKv9;MZfCCJ8cvAcc=WFcBHVtT-FsC?ALE&cG(3xn@8(RMOX@^vk3{c;#vkn(&*4dMgNJK&rCkg`|z?YoqbvKVf{<Oj-DOOlA*%j^jJoQ`98J4zq!pnWL#FDv9=pKNmN82&e@{49i^hG~Lui}}AjQ#fXI&Pa_TMBeoq)IBgGYn_IH{kTkeXHu7UpKF@CesYzSNXHXtDRkTLgg&>TE30S3J$l8eIm&tlmWseoaMIK<Bo6$SyNsFoLT!#|HRzcHw{>-;q%B-7c3X(rfXb09>k@XrENOm4MJbLB}OV1MOk#X3`O(NTZ*xiV*6qR3M8V>ixo)n*TeM)Ec_0KjtK!Q!e?a6yr;G7_iVE*Y2D`_X#3?la6F-IZLx}>pSprE!rYy#tR8mL6F+XVmi|@&7DkL+7PMeRDC84m8*3D<_JFW*<vd<!MB?=Jo|!InPn(GJ1Y4deX`LyNiwCM*6S**DE1{6yYLk{h+#4n)`d8t|gz@x_sH3d6APojUg^~!`+pA;bMGVuelWs@U(b;YLt2ujpPGm!JuVY;!x);b9TrMd4?8kG$If)3NF9;@Oe)Cv7Il3$DBMArAx-IK?Rl8|?gS6Z$mX1m&{?@T;?oaiC_f?Vi!X1a@FCUYRxFk8*ko>dXw<UzTaW~OeQO_hi8|acflLA9MkS-Up@q)-t#6NFp{H874aoDc0|J@gjReUr21+l7EKnqJm(R`y{WvvlmlBaTu0#?EDnaqF<u7cDK3<!EF>l8P6LNb_am%4B1SkMdt3CJDdprAka{TOfe^@fpFERRTGNDDbvk}c^0=0L(z2bD+XZu-g`9%IDZc%jIdwus5Hk^t%-*ZjyPtNIn055xqGQAyX<EM=h63E9w@FrR2cy6S3KZ??pogaIW*S|lqV0gSs}q9nbENKYJ*%p%K@c2A_dp*5F=Rwllwf@oNPCF<p}Z(v}^W@Lv6GV8owc48Wl^+Y6`_oR-2b9xKHq@X2WLPA2cmcZW$U9siIs=cp()oqv2d4{5OXGPtG%K$<Y!w$h9DHikfnna|?2(`wn(rZoZ<v^t!=6W(uL|H?i(eD;?rBzobmerOZ+<_?=8vH#c0?u-f6)_CVErE&_dnz2W@|NyREVb%!yPh~qfSqWeWnJa8m57^>U>Bo`IlQO<Uz%7L=uT_{ncbQIBY<cjvKjd(CEGln1h@Dz<lcQp|7syG`!Wyqw|hV}3~>`dqM`)k$D)L(VHIq@8lsuanU~wX+2Y`!Ph!KS6?317rfyZj=QXQm7#+--Pj!(CNs>k*+$TARw2_A$Kw|1KhQzA(2Vdd{hP4P?z9rd8H~$1eqbJDbvR&5fFVs>HO91y3#1RSZ-bo|l_9HG-q0+aqZDa+wt*g3v30S<RphT{Ehb^v}n4)8O08)eyC)SMQI0y!^Qsl>yEn|8Vw{hARdYIjPyicar?~==#>v!{q`OWn`9{%Bi)Y+=2WJi8~@(}5miI}H+zmAK3@_cmC3YUevS2+=bdt);?mDhJK%Yv?;%yuf*#iXW<hQ5_y&n8vTLL_K61&~Cn31vpcmxtSuyT^!*!G?|R_sm!V!q!(Gji^&^sc4OZK1pU7ZKjWiXPD=7<t?k2WI`%;LQhTf1=~*eN+!XmnGj@qP(v)^2ww7)v#R)?Ea02SY$7U|77^G4QO<K_`x6FLo^6@!@WVE1I(H9v#}La9ooDSDS0oA(B0X3a!8k}2!-Vxp)d?H0@Z%~&Cg4)65|#9H?!ILGz`zxt^|Aye6!1uiO%x^r`=D@s6<dS+ugQY_D?Ese<EI!I(`2%&X)SsNznds3Y@q-XcU68*z3gatUfrl2rGNHF26tzV#IA>U&Y4WuOA!6YS|KAp1wYk2v3Z2O9m_x#AYvoawL@?c9IXXul6IgU%Yvy5zEe@Ha2u9Iq7WR*rzJlT?ueLy#PoOQHu@jC>^qHlfai@9l8HCs@K+e(#Zx90I_~UN&j~^x&0qGU480sN137ZWho$B8m`N;D$iY*>$eyyIWKhL;H(Ta*F;I!{TG&D)Rx4T=E&^W`^y!nhAH*^{TbBMN2uDwLOzz-Q@Vr_H{s=4^Y=!N0X#?U{w}x*47L|IS;-wH4KC;bF5xO!qUgcgh){9Vlu%%4q6%Q%Y4#3Eb!-DO|er;iQb9h6HX$?II{Dc{y*(&VwWMu>X1zBhoa+_@AJqeBJR`d(5>Wc04>l!9UJ2C1Lv2`GnC+@CZUM4$Mh100C(59#?t83U02ym@Pm3yZM{)OLJ!WDk+KyDT9@BIwZ(ItsHrdWF3s8>mPrUa|B5g$TdDAYt|i-*h>7dmhPwq;={SmiZ%-5{8qS`kRuWg~S|*qvUC4;}^qK3{S0E8GKV+Exq$+E&6td`KbyvZiwp&RZ7CLDyu4IJQs4*%ge_#UKtMB8FGmSj$c<1Y<*gZD<W9jMo?BC9vyx3D?u<{7K}GPSjP7#gUi=2nvymqd#v3a-QQ`!j>_!iigobDcvmo%d!N=@`1Ntd&thlEt(Ak?>$V_tjUwPLt1z}LZtAc2;_qQM($|=J4}pStdPT|An3`I%)pxUBk4T)**!omTb=I_y+|D@mzh|Jexp{*JC^i<Bxd_%UuHhqwgDPSvi|z)5y6m3z%z*65uufPF~+h@P0s}nmygYoRmF>2BHYnEyEjBoizb6mn}~K)sT|A*<x#IbRJR(hTlp!F61g#TX_fNNvU7>P^4qyXLPZxtazXEh<lORG_9#OBWA<N!gi8`vb>+k2-dTcF3MK(<z>k~gapv*GIccco34*i|TT2A1n&<&wbrK1c2m6BciPR7#5(_^$Bpkjl0gfyR|E%hy_CTQ|qEJMagb*U|fQXHmjG&k(*?{G0+VnfYrKC#Cfk$Dhv17&(o?kL&-^fd~B}9CclMoRXR!~FcDQP_Kf(zv>6Oc>BN?0B?X9dV$e-4c-2Nc0Qqzdxy+f?ilY+sbNac+USl_6*^&k+{|wiRw8A<%{Qu%?UIFoj;$jl}tKfG2`xAWn+mnoLxRq_Q-lz*yu^if`5-2q+N?C7zYQ8P3XL`kVp7YVl?qldWB-DI8S@p7BYta?6gR;e171s>>Jb2D<tW^$uQZ3U!#*RtVkkoLlxqYsT!#NF6(wU0sV2u74m72!zP#2^Um$wA-jR7a5&|RiX(XlSB3+kinHEygXz}f%ak)X+3t2#;g9wknnz5vMNfps@i%9jh+j;>TSv&HDa%5mk_xfGnZtNa#CZ8Hp$ZMt89bBRJk{0Q6a3>_6v_1XBBvFz%dIWG>(F4*e*3rog$k;Ou2y-l4l(=$EL5G6U*+dkirVFg$0>p)@mrg#4tozG{SB>K(AwvV|bMie@sK(?02EursaTIV;vhH5?XVhiw`K?*x}xT?Tl>qJS;<29m_q5&yWB{WIUYg$BX1`){<np^$v-+kyG*uHQ4;fS-kv+0mVe={_Ko6#2%n+4g%4)F2K+6U|4~4il<tf7H7)|T_HM@n<#dH$2YcfAxXDC0>)%3z;4aRYCzC~!{mKc7MlWV3}e_%wj6qW>YS3(LiW4d3O!u0vNW*|$quXjyx0%X!CJ783zU`8<dKYcNZOX=601B8jul<ssVyEBAD@pDc2)1lIexTqGUL)jD{{^Y$!WpTWC8+zJY}Wm=Qf~pu^;+`e8HUmATxQxp>ZHaJpplQ2Vg}R6mo5mOBCbU`?GPFiBw++`zX`9a5-;=afj%Xrf?BsAfn-%q=QC{_R;3G&z&iawKYga<S;^+>+DIGj)XS5a6?;`Jc_b!B`Aj_2ricBiXllQLgtZVbUCh-#MP@HmNjq`QL4*1l1@fknN~241KP0@0jBhh9*12Zx0*uiGu04+VWUnVi!Oh2OdAr!>{}mWiGdtln$e?5YKlYp156N0@C7aGIxAPH@;CoVVi1HoqcKE)k}@On*(5X?1-v)HGS0!57@6evB%ke%Ve@csq8yi!Ku*k-a$oCWD=LWIWLmxSc++5q&$BO!X4!Ax2f)G~REmH`V6o#3BghFf$^wQ?jwol6+_Skzx5P&LpdRE6Vlb>uUjM*B-WIk4p&WVS7Li>5_|paCh|7C?lDvmF<#)oc?}45vX{(o)3^L-tSoKQT@wy&d9#koj$O3wrY~9?eeOOE`#7vj5Tvv5jKSG(1Z<%o#GvFu+3K82UtG*;{UNYU#fghDS^m#Z#WQ4tb?Nrd0`Rz?4I64IPY0aG6T8_CTKmL%sBQ$Il^!n?6{Nrcvlxa!u!lmLstRoResv6SgNa6qun(J|AXhX$=Fc?dPp{$f#@Gb))a9GV*(xtISLBzi(NQaEK8Q?5&`z6DW30oM0SK$K+;zgj6+1e}%CKwgTN7N$|vCov(X3V0Z3N<mlERjLONw|onQ<cSv%sCEh)eJ-Rv75zyq1fc~Yg<9OvJ*)n9maQT;<9a$3cE{AwGk>Ku6?1%)RTE^9$cC^j!nM3zg<Lp``OiJT}nVL)<Al@qY^H6FxAg5+JQ+U%Eh=a9ZEnDu_ojZvlRX2xR|cmEjj#>l;!+z2xB2#11Zq1LD?4ZdaW~iHrVyXe6x0o8$*;klT<M0a3Ny6AviReVE$Blg9wT<Po8|vCRhJGTQ2Lync^yfehEnpA*K8o02F`Of;`uy71^=(F}F7i#v?Nixo=VV#PJvyJypAC_Ba~uFH)*|unpH5fv&1r{|#jn&>CL~3<={H0qaP8Lfdb*HH2Oh0)?S?Ak>5~2!D@>?W42p)H41YC)!6;7f1RJ3{|x@#(^>Ka~EnU4qnpOiwlayRO>{9HQq#USNpeP6su`2t7#g(&^A_Nze<KKJ7?onqJB{JOG4N_3NjugN?+wesN!V`jq7M3NX7+hPbje>@5*X6aPfcIi?i+gzAuV9=1vG_#F|?8L7r7y@iM<SQ(3)2jveV~B<LCc0S=KvG%gS;OinP)L=U<=4>dy0hGi8&!msh3a1@D)GJkmA9ZGVBh$Yf<uocA(C%&lL*0!#aAPYIN(E?my(z&7p5dmq;k0Vv@rG?N&E~q5&%tV(u>A_IP>O&nft)gUaG}SA6%$mGJ-3e@MDPr172%bZVTu?P|Tp(CrNAdeZA1ubD^H!t6$!xDV`w*cK;;hKEDL{x?I}sMu;xew(Xe|LQ^4t}BxiD9f<mV{8@EfnQ_L)=*VT$FISkIFD;8jj0UfuvV8ebYHuklWLARn35vIMp}b*Iz2h|cCE_!K?{!Hy5x;!?gNad-(BdRt*=Lkax|<{joV3zyq13J$8yCCrCmD0Y2ewO5iRV#8@rcQi0`SiTQeAix$J)pr?E7uFGTV}r~J^oftor*IhI>>@S&RG0lmv>Hj8x*;OO-v;SOX9`3q=E_X6$43w}^0tM8G@ytN-?dSeI;ebw+_(^`m}abGr7DX67#L3V!TK+>JlQNPi3FfTqhBGfuTHNxGDtmD?6MuZKF-q9|G5)|nC3E*GQx-@A%|k?A>=-Tt>6}7+W9%wsn=wzs5*U5mvcgw4g)1e0>)kgiZC)k1GXfYf&9OpRD@ANZ$pepwDS^$P%QI~M#M&&jZGS%r^*J!O2Q{nsh57gQ81ki19E#v+pw+13BC2cWgA$_ym*nb5TA~oI6|Z6DcgISZB`X7t|U_8c&M-VF4jtx<b5OYGq<`dC>o3;SG|$y0j61w(S~wB!ip5+1=arldge@oS_A*R5-TuGSn7+lM|zk{2k;B(ul6=;By<}+BAPRbKRIJ^E841&5^KRsWMoQUNrD>wC}d6`y@MQvI+;$3tLj!uBgT|wGPxjEF2Nhq&&6#;!^fB7DL^4oJL+WcF+ENXau7!NU#ExEWk}g_S1rD&r5Zq^M#Oq;U1`CIB*5LC@TKCMhT1bB`sK}HrYe*qhq6|651ylbnB1AGu#gNSQ%6;+3lc0irRPYx4!z6x>a?OGy0Alf)C$QbjanTAFt*{c5~Zven-@jvf=Uu7u9wTKWy?(5QKZz7!9ZX^DlFlnVigxxj!W2&gD*PNGmrNp<s|aN!WoD^FM?fkg7FvXjWIjR9Vz-HGsAIurqU8grL%F(zTC&Tn3jUU5T%Z8{n-mwk4iEZ8Gvkj=`#OPHfIXpRaSi?(LtdGQB>YeQpaG>GVoXEZsY++Xp)j%PCPRt>S4GghoZDSpxyK&DGB3A<)5&30UUCOO3409B10k%Sl$8cA)2#4=QUV(sIY6}E6_r&DDoZYUvbFcA{F9waiM;Q4x?`Pd*=;`=#*{7t4gUg47x&6h9|L0D7+iE8EhHpA=e~e+Gk%+l{Wyb3vP;$MzYbDF$FI)O4PF2@G2wZty@sCWSiT8H`yxJ*ppn-b6jw1ZS%6LU*dnI{L7d8ISlhUfV`+AULc7;%S9!EyCa$KVQvshD1{DUf%NjiinLv^!q98dY_+SA2wbD#8}+p#F_Eh)Aszy27b2r5_!t2QKLJUKIP6hq1_lTA@si^#2Id$f-$@F3#$EVCc0SCe9EifG3<<$__+ikY69y&H&|Ev%_8W0B_z~ym_(~_!p;weoP1nMXG(0m)ycHMBpwcGRtL|aarP+owZi+UdbxnUKzdLuyt2SsrmpS$+Z&uD_uB{Cu#R=<~#G)%ML(fqKiLyaB3G^PU+@eyx<3ncNdMLE)Z*bVu<aNL3R(;9!Qf<gO(ACuCli+!kJ=I*c$d*U;=(=s<3M$v#5Y!XbYDFbhaC_2ZGC<UzuG)0_E!&E<RM8Q6`7$CR(q);oZPfCSj=~ZyZ`}LdhSBDU9D*4n<MxVBa5H+;pclqLDOY5_BZ$wMjmdc{nE(Qu+f1a&jsZi3kvAicqJ0FpyR2vp4j4r3AST!aQ0jRPYg$l+D6-!`!0jtunr#96hW68PMb1F5H31sqpr(Y)tQIgj47sy#CH!3KcEmxRv!vpGyYirz#i9zq4IQh_+Z431v^f$3srG?s#d`A1?ghOf_=>Q$6S#TQ>cl|=sTZ<G+O`g(8?GL203alg$qwF^p3wHRMP~=#Au43r9;J$QtY$RX*cDX|VbE7BN7e8R0cEf_3oYZMBpOm{DP7c75fK9tDw1<aX%4407na@pVLk|yvp|{4CetF(`D&0vs}4kE9Ex>9Up+o-CuzO7DrcqLwBiQF*bTKok+m<KTjZPhB&Mjt%xx8MqE?Ko;^=5-`e7SjaGNM=(aP#b$9dCE>#Mf5>x*vh?NTEiG?%KJ9Sv^|A#7PW(obXw|Bn_NTXR%}$+?H|ZHH72B`$32_Zso_lT$o~7W`flNO45lM|wD>W5_wERI%Z%t6CDkksU~HciapnNg)_}`<S;zG^tJ3VtEfR&V_rv+$;{J8m2p4P;|%L&Bt?JwiLr3`BA5iepsQGnb8uC%i`snOAp(T%h6r-hzYviB7`ip5t{p9o(*i{@z6v^(OdF#l`1Kj1N3-mF8*v$C<^ZYWybjgYVPNj!y>!2tqzh<5LC8Y`9cbp&dedptQ14BwqkJ~QpX~F+(rb;Q&E@Ph{uQPODWmo9?p7+>c*8S<4{$XEt|S+<At<D;~8EMsc`b1oi)q>xj656lzF5xiC^|H5wT^758Rj!!W<7A(ELa;su@0AFl@$!bLzYD?#^>0A?<nv(T2VQz=SB$W=s=(g|rAK-VvbG;s^D#7+b$wB-4<Wd9W^^I*EQ85*%m;YiwM40~*(Q>4Wg5YdZtYYCVp0R7evb*Be$=ntmGV)LuxrU6|uQ$j+H&pfuOy$|fWy=F%N(Mv^p;nh|Mo3+={aHcK;2T&x}kvIeynz872)P7>=o=y^g_8*94kDC|Ze->ynMuA%jLTW$AjI>&)*%7=WCaRMFgO|-V8tBzp7O)7bWNh0kF=Ab+T#dD&7+_8_J;ABCJ1gnmf#^4y4&JB=O6cV4CTFYgQZ{zaWS*I;Z5OW;xK~i7PW;iWzc7jS2c`j-e>UK3>RPPiFdJj&V&a4psW9JSys`S1%56K1&v6vI!Lr$nrOf`3`aS`^IhB>KW-5sY7-KYnS_a3eL2)k+BR)=fkP83)A<_7Y(e(Z7HL59k>A~@8s5Tr){^tZ@e0%|x1WfWk7M`?MwfN+aj`}|o!F)UN!KZWGSJ1t0JZ_<@tAiss27q`h2&WP|aDOb+y0yX0zhc<crcNV6ve;&i|1~#TkLfrXwQ+8XLC$GLj3r`e&mXw<>dy&+rpvzBW;N6`&5b6&b7h62Yw(=sHadkOaLA|8sV0mQXY!_XCet8b|_cd=sDc<)Q=wQ0Z$D;DiZJ=2NKXlxlm{H+|Blxp~p%ogdi!ij~w!Jor9{Mnh0FwFfOW`Q_IbDukHlFNt8j`3=T)c~60GKM<$Uh{#&$BM#oA5rm12}AC&rwEL3Nn#w0kMs$>Kbxpa6GAFRQH3^2pgp}JRwk|;c;;;)e>a<v|-;>Ole4XZ>m9AT{uZJz{FjdMrIxI_rn?wNauEN+~mx4*^aJJD{sz)3uV?8M;~}Dz(&<JgA-ZpBV%;sa9!===Tvh_$<WbteX}tcNHtfmYq%Ic97TZd4iG6fDq<T~o3PGCc!KOZ$hC=v=8Z1}W%CASS58Fyz~zX1<!uPCJLNho0L-~|Nu3_2-3uwT7q2H%0dcG>DN@kMshYP;oJD7FX33F*1c9x3RxZGD*BNY+gK2agKI0cmq6OKqkU{`>f1yTMT3ZG+(Xr_l>HlMjB@pHC<WW*S?x&4r=M6LSc;gt<@Y}eCz3qwdp0r@+6#Q|Fg25Ft_W<Z;d;>nOk+D#)4tx=wFJOzCnNltpAr$ZpXi(vRaECJ_gdy~Gb{&<RkXc+ZMVW(S$G}kbHvaUWAS>dZddyL&GpMv=T@%Bh<u)pKayD1#Gs2B~Eo&nu;Ej<O07x{>Yv^$`jzCI-;r+J@c2J5+;t_G(2lu1-j*&16YIJkj(9JMF8Mb6hdrCSi1LUDvFkR_}wq4XWB2K>F&G^Yv;7Cky5m$}t<%V5WogTmrrf9j=fQaMc>ID`hTn_FBFpgWHtVCE4*vjZ{+x0+fy_V3&ho~rwjd#>P%E&`@zmJ-Tom#?;@iQYO?;3@w#|B`+F(QsHhy#3Xyb&r1WsMATK#iQ0@~9m-=&Gu6vyy>70g1!Lp3n;ns?B7KKpJYRbaA7LugLRe_67s3G-oN#26XVuppA`f7>+ArhM_bJ|NKLevsJU|^d`6;!;|Po@@;Fz`k)EvFCo!HNQ};Oa3uEzpQNyDbQbgHXG!J83$YVcMT5$gVq?QRKd;<W*3i-?DaQ5FihX(>{5UfPH#8kAdrdHgRXu)xit%f-;)B51ddFFSlHgvD5BTc=j|~GkKCBnG5*YJLhTyMG<bXBBewjywE8p-N@Ii5!LvFrsdc{A?YjH%*@11MuMHgRnL;-2k_LlrN*-z}3)_y`rWp~2?t*$D;cr81qUWPRToc-g1qkmg&U4o~f#;B$bKS)R0s9nO<PR7X*nO!y{1}>D$rCh}UN&=I+{00?Cq5E-KElF->Qp)Y8r5u(Vax|Y!X3aumF2zMKxlV&WNr0OOEQJTdn^?$u>TqF$%ws8P;D&j@+0w!2p|}7Ul3F-&Sbls=gGkN!s14I<C$@NwGH@s2eK*lky7i7+!f=utf^mMvj<g;Mk`Ee8Q!NN!yFwLKz`+6E%eWye_l2cAb(&8fQDgdDy(5ao_+lb7SNOs&@o*|Hc~10N4YMi(?ds%I8yUEV{-t*&Qf<Udy|o|_XT22}^ul|#y`&=8{u&^5$O}51v}Cg=v^_~*X2Don#JLcbEZ&BUXN*m&WP&IjoTrfgnTW+7XM}vtN%oOeO&NF<kK_^)Y%tajdLN@YrRtVkM)wR?sEOfmxW>jdk3u=|yf2n-r`Xl#3}VzVyQ-}!IXs<~xl59$lOdNTJ}ZQ9bj7jwkV+F2=lTaww*wXp^4#?sNUlYa?fVxzkum2kN(sYol9Rj$64JRi2$-wKk+@)P`Qe$~;v)08>;ac{DUSOpPA2N&BY1K>0Tav_GyXdl^>?Ge#M<)bRlQxUP;zx(Hmko4$#cYoYF*|{+YEi~bJUU#mCt?erwr-AXb5!*O}u~LSWMS#>U~yfrmT)i=%jlqz%qv8)NG}Fd}2(S0EeT@Oz71NiiJ6`^itX&<^H)Mm4D`>4_Zolgi4S;dvs2`i41jpI0)=KWI<BVN+edKY9<YpjXaJ$D|P<yhO3)2>J<-#!#<(#NxMp3zrILr-B?REa;}o7W8F+#;myco1W);hF82f+apOlyIvPwjm=<#zCU9~an<yTm{MNT&HeqOla3u-~CUIj7wI9Fddq@UPhG94{+BHiB`8N2qA;n|!Xc|Y9PmLB%L(x(x^G&m*8aZ@3P^4n&yWgfxQ($-=rv;-MXM>xJxeDg4ZwWVtCDW@had5a$dZaZiHbzQn5S3Ab&}F9Os3$?<#1jty8yQND_m8#o9@$$s+QflZK2R9ulIlg)<s=Mz3xyRfysC3Xp?AETW*!ryNyx6{M|{ESAXLDqhLQH1Nqc92Ix@mCj%)bw1DJZ)lsTqqd8zYKX66iB?nv|xiSPss!niOp(t_)<aF@#HQti%ME-W6#zQ|OHXG{{=T@QYWFeH%Wx<66rEkcBc#X5Dx(WlAqkRl|iy$g>RdemxkO49E|C-FD!FGF!at?o-Iu2ijdk7e(c6Q^f>>|EtmKCp##O0j!K_It8bCXJl@v4&pb{_;dTd-7by+D`bMCw`Fo@CLcKL97cuAX8_qORf5e(;l45kw)Ci&g&klavGVh7^6Z^b5~#~Hh6Uas&uKHEKZFL1~(*PSVqh#0OMz+^O#`NO}f75{7+kw5?9-v8CTN~Z8B<k@JgDi4DckElN2GuU^<^rMQ}7KeRU0DC(cS|K+F--k#+M>sETCZqc|QGvqHs3;er%J(ZW_FkbG=)L=b+2dlZH7lgrM2@;julL^6LtA{~|y`1#mw^t35sx5;}%p%nlV5C1tP7B{%iM`kpW;)nAjGTjx5!G!=uq?PCtl&ECc9E7*U=4r(KaxoVHOd1D|^;VkUo1%TZ!y1=*6lmupH6tb5I%ryxqDB`;e9xW6U0}%yIh2KcvY`k=xh_Q-u<bJ`$P%-ej#=5km{cg&a#&PHdQ2}`WLq>1Aa;=1cS8kf?|dzKLOtR1z;)*Kb<Q6ilS6D4#MQyJRp<5C03C0j`O!kI+SkM86o&B$4V=|Y`-?rL18=%ILM8m+4FSJsM<Hw>WexdYI9KRi8Ezql9|yuYQ|(6^sKGiNBZjt`VE#x`uu7?$J$J?)8<8h@IvMsyr;DnGq%u796JOe~`y#e=8-{v?c?)701V?97p5(2UP=YipM?LL@TnwGAv2qYpX(We@*Wd<2F$MDUNx-O}QgeYub4?3akXl3<+8sGg=03n70EUtiR)gDYzu`KkIwTZyhrv_|9Zlont2!ibFNOIkRz@@W;{C>Ji*1&=k>*}hhrp{y5*MdC;0_mfO}Q;8CZDmu=jo(}QeoJMHxOyQh*pbt&ZK^>;L*Oh4=>56fBgDfln0U!1P8Y`N{MHcAKTiqsQ-S1m>#Z8yLB>=v$IDSSQ9CL&2o$&mzfSqph2t|-&i`t$u9HWa~h)VKmJ?tF>C0y@Xa(=U$idVXxS+2=Q}lcm|WBQ9G|+=QK=3)$S8nB<$<5Z=4=OY9ekK(Fjrg)Q%JUX6B(t;apj~ByT_SMcTgQ{_4>yP47a-XpE08QzQKy^3;r@!UT>WJHk$V*A&Ok*lqF}*Kjd+CJx_*_bVg)924K$<tztvrLtZR>S-#uiSjuhh=Gze>p>DCSj}4uE_ac~|^4SI_Xof1jt#!PCYb|SwO<#7I`%a8h>K#nx8iWMgh!oc;hDZe;J-nvs<sdE}hkq16e8Y@~pNvCAP9_4i9KZ`Xao1fZ->!nKOCCK&s5n24O(5Tb=`Eg!XXz~xFq=r_n^7sIcB$y+>LeEE(Z-+o(Uts%E(TcgE;uI|Rt=a~sxw`U+OT;no@Vs=rwdec2P+fbrI^Blte^Wl#s8@g&>NKF5h>L-l}H$oagd*I+Gz0Q39U~(`dN)<!B4cEOl&k0=5mBtukrAO(FYu~H|BT=GN<C>BK^Sx3NF;~Ep!J$*0{P_S8IJ}?*E0;rN$@Te&TwdrER2aFB<0Wy)N%!NfAK=t>Q)N$ECYU=;d!0$(^MeCb&P__}fdP@CeX!>RW_T*{TD`8eL64u!Rg`TrlR2ed>#a%x6gF0C4(W9&kuF9;}1&p+eh@>%)YkZP66In^&tAebkGc8$c;Vgm@uGM@h-w(2>uX@D~1~Mq(2K-BF&&ktg9sCZn?P0BY*#=(rd6MAc)kps)NgzPMa#K%F({ONix#VMo^pS7wB(iH3F21QDX1{=1Gm13z#ngCUjF9J`BRJSRT6qYk$#sB#b*521VxVhn+!gb*kl(2WUnb66PXZFa#Etlc3-ovC-4ghKh)a$UPDg<FK<PaZyV48Dl2oobIEJh(ujnD2Y}!Xo_zZU)N)`DB%OvcvD0Jwy6fLJRj@JwKLy(P}VdSoSqcss=R0B_C0Y-l;o539s(na6W&mMy~imow?-?0jxf1%p|Ustea4sYvQ{9sD7xb2X91%!pK}g*RmEs*GDQ`*fJ0)?%fGKmKNX&VUzVTAW9K-f4}gh;X+DZv^ZQu+=toSEScXY*Eh+R>D}G*`r&Kx{^kyUNN(?L{<xcdOp}Kj{(1JVhuQT*ayz^GIDdGUy-VJHHPhSMtNG>h?bR%~nts8Tlm2x%yM0K$e3)G)H(375{C<|)KTPq${5tt^H-DI4|G^7h-rRn@oB#3Q!F;&6dN;e{FI2sv-TB4jc6#?PpWOqF&+~V)7^Y-0y(h3I$(Q-Vhnr6i9(Z%}o)-C<{BwT&E=^{0UTF5O+q>EQJpn*#&p#5xGy3EF`ts`2JAx%m-qH%!HxJ3xoK8lMJ=~-QyXmuTbpS)_f1KT2exM(xZ|7HY!WTZP^?v?vO<OSTrULopr>p6mx&3r^dvia#NCbtn2qFA#e*e#ePN0bWk55y-5Mh_r_&B}3oMEr%%!aNB$4$Q8e1eLgb6>q1AO(n;CGTeMXO|E2&$ARy(l+;>KF$>1_YbtFnO<Eb*RxB4cY60Vxu4yAo?kK^?q;{s`5mxyd2@G%Rc@|@jDEh5;&PwxxN=p?A~CK(L9@@Gk5AWEz{K6`KR(e}K_$tMO0fR)kGmNoI-&{lWln(M_B>%ELKrE(LVpN^@s&vICi!^tZvGzEqJ(pKbNzYt_1?r-Av_0?oxZ&RV%`!UbB2c?0G4oX@1`H8f6VS9%D|pRKeC-B_qVglIsQR^Cwe3TxDr%d-_u!fwe$;JB$?73V+9bW+@twKi~s_>c7#KF<99KzXJPL{qD-!C?m>a(-SlCaFvRq~Z)bS=Zgx$GVji1bUVgeGe!~-ZgP^(pL>xH3mfOI2nZ@UK?~G$IrrY<^`PHYpG2vn78$uzLWCDzCLY}xkPYo_VnZKv4E<fnCB?DIentY(EcsrxVrtdz_nH_Z>0&=c6q0{jSibtWoUoPa^BKRbRr@;GzCY4xu<pZJTJ7Vx)IUwXve(#5TNTqG~qMsN(WsPA6(!3&*g|)s}rEtgXQc@ypU=rG$1VDR?a1sAs3{+hy+o{ivaZJmymQGMKwtVMrB(w%Gtwmdx=%44o$zp!MMlYU<GJ^d`%p|hGLLup(Hz+g~3=t99oh1W$P=1#1M~g|@kH@+m`H$$5@A<?R2*ZCL<hxE&Mv;_rJ-E{HuTXi{WUMLxZInUM@A|MWunS)$cI6EE$!X1y=s6y_&#@)VU2FcOZ%4hQsb)snPG%UPaBs~KbzcUmd9k81!%t_6ImDmaL}*mLCo%jGulus9&o4RO*nK38Ys69%Rc9Iu4CbqAo${8ys|lQQ9J<X`I2s`KZ*SbgWKl`C1s4%TW%lyDmUi$(OvCn<Ml++ShQp!6yb>>=p9f{z+f9FC_h;g5nhBg`4T~h(nw>g{FSzMBtKQFc<xkndHdW&K4d~?e-Hf;B{4ZK=C(@-CO<`Bapk#hHkp{>we%Gl)&dNHwJWqbZbh_VZ2VSCf?R&q=z7P7nR#&z$xb9#5_r?d8Ty)MK)Rcqt4IR%YK5Hds?ZCg#hM&_meCphogU~{#qmcHavthgG`JrcXaU22Roc`NYYor%klMZ|1V%gJm%2ZnTqt0A|25~0a8{b!p2^zeX3w{P+C2dz@%ZreE%J52p;dO7t6T}M7`Qa{wA#Spp8ijmBOxM1$d01I@dSRU_7tJCIxD<Dgh#i#=Hu-Jcb=zNGz1r<|7mrncQ8$mTT)D@q-wB{8O83xo6OT5*5D}4`9RHS2kMqoX#QB=K!qg~yD<s>Za)r(oE6Q!`hia8|83$WZC*|D7Rx;qD>5TFyf5w#$#ofRd4BPSCMj3V*5A4O@8f{tqP51r%FLUAn9m;5C#_9C!{ms><huPKF*pqp~cdFN!bbBJu|Ku;e?_OMl<;MIRR0qp)TVfvxOb*zaR}gOYP0>D*@Fw1F`632{kdMgHdcQ@uk<*2V{|cdlk74j{EB(2z)yJLA!-23T;+;uyvtmQUC$@vkbX%JZUjZgrIKTFdYWF`r&BOF#{fq+x)N`yMnUKLmbg`(vPkh~^g3Pt1D7EBWE%9}|M@56itHW0i+!y_9bIvtg@NY?Q$miBL>xBtOG6BqyOR(`KA&u|Hx?{qM|K`VgpHm+)j(piU`mCf_X!wPC)t<TW<!xe8^QTNIk;7*sjSu-qrCU5KjD$pdKQcLN8@@~J{?JCf5|LcaP$1US$YWaltk+(f?PTmP_jQ6t85ts;xw1$gK_FZDxWkT`D(W;0so%`e#a%p0_-N;95q4T$fKPY3x)mVg3T0r;spuZ6glv`{$<|<`4tLz3dYId>P(pL`Dz@u_OzC>N-oM(d_b&;}FU!Ymd9m&`C2r?`0k(^IBL', 'NEWS': b'c$@<O00001', 'ChangeLog': b'c$@<O00001'}  # noqa: E501
lttoolbox_language_module_files = {'{{languageCode}}.prob': b'c%1EBX>43q6`niq&A!;4#p|rL<9(YM@3Hf~aqKurZO8GJmP$2Fvownx*KtB<RYXMv0)g061Oib3MMW)3TS`SF5QwEzViOgmls0Mwq7)Dkzu+(Dy_tJwvqM$6wUXSKc)ss^_nh<Ya_)VTNbzg5vFp4P3w_v_x2>)%WFH8+9d2i2(BBj5i6^3ocru!dxjY!NV*zPQVi{AIB{r86<}!ja&*LZ-F@bq3ScSMB)47m&YMsGCPB=%x5gc&l35(=0PBMuTSfZaf+(FF;afliwtt6$1q{(MV&oe>2n4?caFzb;D`A%R#C9flTHY+FOIb{*XbdDa#xlHF9)K!}>(lnGgn{l1P*=vq-Gff>?$Zw^2!Ge-8U0HSB7{LOMEtZRNWMzeqbO~cL!4tTh^l8i%3N!>uPEfPcHfH4nvxz*O%;PE5n9xPso=GrGqaDvseX*!JIz31(Mo6w@)=Kj+Lmk~u5l6T&PnpKJVf0)v#yev%re9yVg$!Mwu-OdNGfb*khbglj;K)Q}^64|0C{dCnN=h+icFI~<5{GbDA-6?LD@I{aaT<`RGH&RTIIdEpzSjFyDnxxMX#LNT!x5U;DSc6`WR4lDJBM_}DUEqMkwa9zda2Ci+$Kn(wDxRK-)6KQ!^~crD0gG6D_w;)FNHv{o~^53scux1zgW-KP)*s^I=@c!cJ0}`RfYXssx8>viZjm=%idb78fDU4tQu?AlFLVH;k4yjSQu~?+L>h=ELM&68}bTui?hR)%WRwwuH1F0M*2#QI@6X%n>pu~JsRAuVkL7}_#7qrfwEF<+UqRUaG<<Yr8TK2Rq0go<oC(gMO}^}g<{(aHDlX#7HY<>?6Bo&v~Bux^F$TV?aa6MHtV$&s55PzLOX9K_iWpgOl;efO4{?9j6FJ>yQH!0Qzf@1R&wW2-9jn4bvSav%D=<d3sgEL>s@(D-pRPfQJ@<KaoAm|WsdK<ty`!-LWOyZ^SGf<GmhV;Qf;m=zqiH#A8{5dv;fg9#AIv>F%>VlQ(LyYRa;FaTfxydT5tjaMaSq!$%(0n!*riGd-s-{oJfz*R~D5i%tT*aER8n1!|8H+yk+GTK7SxsSyf$ATNesPqOo{=LsNT4XIEc8Gczl*GY4}r7jrWY^RhBl&MKIX`B{JkStYAt)vSiqvN{%GVHROg7GrT%&l*@G+ryezGizb3tc|s^4%W%KSU2lo36^9j*30@>KO10!Y={l-9nn60XJq+OvrnQ#i4rABl(=(f(qGos2LB&w|2E}bZ^2*U?&5COl|+dWB}#nk>Wc4Y|B`rP;pi*>NwqwD?ftjv^(EdKDC<nl=Z%fKeSeoIQKCeN5+zEMC{dzBi4rB=x+wph>E^`Ut}BTWB}$YiQKCeN5+zEMC{dzBi4rABlqgZ6M2Qk5N|Y#3qC|-jB}&{5|EoUmRMXL$4M$(S`22X{*AH^s?f$&`xZ8ClQKCeN5+zEMc%$HMe{YlDn<ei2dTwV+yfN|S->18MACM?fqC|-jB}%+eaJT=zy!`zI^7jx(lz3|+mQ4zOh6+<TGut>*%$%u=GmC{YtDQ5ONqarZten|%%)yyMXbvZ5PN6wnoVkSNa&zVun%l#fM`#`|XI`Os%Q!0&T3I<~<w7g3;H*Mu6+X^<Li71K^9#)%;4C1tK#;Sb(1MkmRSK=LinA)ARaJ9VEwt(y&T52KQ_ESc&}!>As}ovXh_jH;LSfFrLJLPYiwG?e<t!?+XpFO%&|-1U;zEnpb5<|3`UcJ#gx1i=S>qmFO?#R+YZ87<&73v2@Ya@A&RW|zYisAMUBtF`aMmHTj!w=xh1S`{S(nhdx;g9a;hB39oF$T+B~zTGdO7Ru<E&5Q>+9#NUugXUoDGO48VwF{HZ;uH@LtaL*^Eb5-eEl6GL1>QF!vizs+_ZApJTeHKPGtvCve${b!^~d#!%?vBsMc}%8XV0<04KgI>VZoe9xP)hE0YwhE;}BdX~Gfkx6z|%_cjcQq&pUQKi-k6uqvHatZ4yId0N>Lw8*v=S>SP<2cS!)D?wdvaTm}&@-IMI9}9KWs+Z1402Jo4Wf5zJ(FgIu5l$pSLwPZGE`5uVKeAG<Z@XzDJVfdN%~2tBpH!b>g^iN8hyUN4ZYvTxsjbF{km)VOswl8U(=^-lVZryLr<GYJg;|aL(PQatYY+?#4|cyBXKn|z!UnEtWy*X=rqY^aKTJjR#lo4V~SLYG>Dayd&%QuW;XOu=}WP1AG6ZcS19_lJ~9&?H|IU)TYp-nm6?sV{xX-mw|F)<y>q^7o4BptO!zB8QA*mlg@39e43Ab}#t(SICWmIx6pd*%4R30A1Hj7~UefRavFE6YuWEQ!!!sJ5*6^f;CoqQlHC)kfNuz0+#4$_^VXT2l{F;UrHOvDh&86TjhBU){jE$Jyj-ig4u$(g)9-*#(ld)k|;KuMZ#)h`g1{oV*O40_X0AqbcE~z5BsNLG-*PI#!mt)L>31&%|aj>96>L|mqg0zDBl;Xb9pHWsU?vSE32Q)WbRx9dovtM&*R!yP7;z+Qd&D`R|7%P$-#nR3i#l61nY&jxTT2S+8Wtv;FYpTYuR8u-~rNOEXZVB^Sv~Amww>Qh%=d)FHXkpEZ<HZ@?jfQuqrfv@9EiYl=PH_3KUXsc~n_n-)o$6cR^{d{&+=ZLae7y;>S+S;Id}psow?dObe@U@0tJ!9@D-Ok}x>UE#W2><H>_JDRBjgM_qt2MK-qqmR<8E>{ds;lLo;FX1x6|8Q)>D=&PnGvo^j8e}hJ1VdBmRAU&5yJnV}6YLG2zF7044)C7{H+b4hL{s08;@>2QU+)lMk~&91UWw2J<yosKsI}mTGaV7VoLUoprdY4$F0TZwM<P91r2{5Ke}1DvW!=I1|RXFwTdu8pc`}7s6N%<K751BG`=JQUvdd;7SDdMR0!v4@B^R2tF9agHe1aiie{3a1<Yj;-gV~EQ*gu@rfut8N;Vy_)H9+jp5-KJ{QC1WB5W0UyR{PF?>0WN8<QO9AAy&(Kx;y$76APBaX-8cp{E()#Kas_)Zg^Y{FB`c)A(iZNW1w_+BfXZN>N7aJ3CTXvYuR@uLp>xC1}w#7{f%^DaEsg<o{z`ELBO2fymUZxZ-z0>4Y*g(QBT!iy>Vp%*Xp;*WiJxetHp$1DAKwIA2|@!9}hAHbgn@s~mTbqH?^;cvrua~OXg#y^Jt2PPOQqy', 'apertium-{{languageCode}}.{{languageCode}}.acx': b'c${61OAf*?3`F-mh3P&CY*A>1#0@xs35HnYQ=GJv+Y?x_8;xe3o*ma1U?C}-)1lw#Z9fj3#f0HqxG3jQ%FqGWjZ$!;;)E{*^qhIYK&irafvz?JaDtdqzOthNo`f`<iNM!7?TvZygEdYhmFK9l+<%QZx)p9&+Eb_zT8vnmj0UBeiTPLQK3Hu%K>', 'apertium-{{languageCode}}.{{languageCode}}.dix': b'c$|$`OK%)S5Wf3YG{YevWj!Rhps?A<#CaI}iXRD2t$Jr_ciWlip7dkw<pe^&35h!g6p#=ckdTmaNRW`S3ID_V5^834ZO>HMiX}@kJ>OSd{Z(~U_jYd{<(Zg(b;{@)(Us+QA^|!vsnVkx(f;0@&b!gg-cmPJiARLA)85jO5ZyOA9kB{Sr9t>H2$>aQIRGyPkeS0}(dqO`)MB_NS7uLUU%mYL_}MSV&z{V_9lW31dij02I{N``&wii%cKrOC<LBQE?~Lw_@2R!f9|s>i`Y>D1H}t02n*B9<di?yyV*BxZyW@6WJ$dz$-+T3Q*q=R{{r&HslLv<nk3O1y{KY5T_+-AyN0-9Tm3}n+b<=!cGLe>Vs$7&4hsuwYt{FWs1`CTN%*_bYMn|Igm)wXpP0&%?1{M(kZd+4;6`I3O1{oYhP5c9}gUbTPRU$Knk(;!|*f6QAA~~RN85;IW_)0iZnZkIULm4=*tr;%u8I13x^9W-(IZK%n%F%Nui9T>)5H;r54Fh8_`J~4L6p7IXL06f_u@hsO>|3Vu`fQm_n(URdbW@><7cmRVMHdR=6pL?8b9N>IRR`4cn)YB1fcHhF2aN3sJpsmZP0*N^i=1qk_TG}5!7()mtZ{D&VtmgOMo)9<w)WI*?Z@^Ud}2lff6I)t$$@HOECp}bk<`jbUc`*5zLI$hPQ)TtE)m7)=5<sl{N&n7ZQ~eL%dDibd)~s3c)0_^a>GyH0+wS~i9&qRoUF-9feO9~m{>U$L`xIJ&}p`fbKu-O^ey}qs^AspMNz3h&0nSPt2#XwevQJf*|YFg`SldP3BfZ94GeVO+dxxr$Q1uOfbyY$1e`PA4e64Qap=%)ELC3-BhYE>aue=G6uyh)E@YA}Fbx#E8kmk!Fq>dI3zmU8roAm3z#UVZuv*1UrzEM?^t=mGRZ?byteye4Vs3JR-ZXjD37BFflY|zaBngg(V<-sxE|iA{Za1VreOZMZ&l%qG_LZk4>wW-NmMd|H9SvnwWgoC+#9MgGRMh(c>#Q0oChs-S2{+*!+mILIc73~zV~9?;Fw?lL>H4U}_9URi6UP7-L}bcoi&@LD4Df!VY0sEO8M%BbxI-J*A@)*HNQ-M#MaI#X;$QoJAx*jop~;i-+Q7=h6YNUW;l;$LgvmgsG+FuX6dNp{KjJMj6moG$aBoxJ9L=Te>U6_6mzY*is@9z2()pmcKx4QYFov1rcN1nm)6UB?9<59=vCOu%?3n_OcLckS7oVWL9AsRH2~3FzIj|)Xm;m4y-mCzxS1FaT-7;z!b4l0OZqDTzam?cxWz3YWpiCRSD&3d>GYnZ9xDLZAi=j*%ryM<xFr*zd8eh!H9tYEqXE9YdPM2UAcs<Dpp5`RRG3^+gO*`vR-F~N{e8me)bz#kLzK&BVh;lcG1%=J;%GOSFGI?ohZpM~=Fm^5rWASwuvaBlLwcTz!zmk^Es1ScYE%#2UM)~Qrw1$$4X+2zeIX1yTzptbE3x0!Mx9D}VUN^>n+v~de1{=?xs?$Bb#P}&jU<|Lz#N)@sJa-PU$T%Xt)Qej>eVz;C>PwGMDW0gL!WQhO1)v9B>J)(yl@3$RDmWDmh-Mi1e6Cm2>#AP$)QwfIRI?#vyl@huR(nF-8dha!?w7*qq0{OTh=YsyPzvaMy8PMA_pZP3-<Q9>_~*sb&rt<d<$2emBGpzdSG?1Gz*tCf%0KIWH*WlpQ);)g1I`4SfV*BzHuk=_9><63ky@5mn7s=5GG3~xk$3}d7^yny52RCxdkw<Me5Ah#hy8Vl$3!`T{<c)Me{bvI-qxF?#jHF&%B+9l90qZzjM@J##S1+', 'apertium-{{languageCode}}.{{languageCode}}.rlx': b'c${@oOK;jh5Wf3Yj6x1rB5P>XOVU<C)KpdpRDjweTI|8zu->uu0p;IkmXM%U>1CyznQy+wZV#r)I<HRyI3gIt3OqrDJ7o}#jr8DU?Z7n@bOl?4l8jRoS{`(0Jem@DT&q@jv`)a3Eciw_z(2C>G!B4_KEW<%4bD>s+;Zqax+_d1-||`USgiBq3ckS2XYut09+IR7znM^)S3Qh#uw#Of+Lla|2Bi)zGAFZQwT6jw$Q$|wTpG_Vg$L-t_)O`eomTp?L6)a{gBB#rDHvEOQwJ?A&|B%J4p!<US>=;;v6!=%Vh0g}(Sii`3Ndk-L*pJ;RX2VBMO1Cb$G{{U&~D@6I4F{3{<!#+v$zx%OXwd`D5lUKy=YEfZ2!%~kv|1fdc~G^q%|Em{Ou`r(0Zv1Pc&pb&>03!wg{8)Dvu$z`~qb|#JRL6*v*Xn!0qihsS9&yo=Tz=X2tvmj3$@vMavQ$1zV!K=S$;#cb{bk<+N~B5Y;{_>yM)Gt-f|^OQCb3CaN_Geyf*C7Qc?Stk>VwR<^CQSIiy{%2Z?wYJC!9YZ3O@hv8_L4L`jDyz{}6RZ?fy6-TvKLUtU93T<3*u4I!p@aFr!tp9<GFO`in)#e?1@(jd~5ts', 'apertium-{{languageCode}}.post-{{languageCode}}.dix': b'c$|$=O;5ux488YPnA}^#4WTq#5J!Xr`~a`@R*N=?l5AuDp7di|4<PLj>Dhix@}8}qe}*0o9HKZ|tB2}d0o%s4Vt2Lr`g|=P)w3ydD^1D_3MW$lXzG1O8%}77F^ny5<5*ZQ<g2WLrdDrmZxv2GxUfd-DXd!NXly#ThWe=He6H{rWh{m?%B6(-4~uVN$xSSG6Knq$OXDnS)_xH@*~OEYAZ@J%lI&DEd9GDVWZO(!^y|B_gcsh5<vf!Vgd-d!bz;X4K*xbA_+W-ECI5tYly9lXb4aouDi?NB2H#yw<&G@}N-n@QpTPwNu^A3D{-i3)<;kl=zmnJ+O_=T9pwZZ`3c-+_v*BuhzurM%HB~$t!^=L*HstNX^?DV*-La}=', 'apertium-{{languageCode}}.pc.in': b'c${^Oy9xp^5JmfZ#T2$;FDwLnfQ^EJtqjSy4s0@EG7G|zfA<AiS=|ShbBofI@0~Ai^^WcoE}ziNrjKc^YKW|zk7%eO_6&Z3h17UVUo)Sk0dqfMPb-Pknsa+hw1oeIHPxV8j3qB&%bAVl)zAo%Xt~KCJqH}X6myMZAO*}3g5>(FI2-heDWSqu6n^;EZ)@Prr1j1A=gsl7JM6u44^kFeAp', 'configure.ac': b'c${@oTTg>96n^Jd^kIpROg5*!m}pWNP6Dj8K-3V^)X}kKKqu?wlEwcnWfx;~FU{%6`7Y-I9g2xd+$VEjUk@z9fDZM>UTmgt!D}T}CD?8YR^=;}^D!&=*VkJYq<#Cs?(1N?<s}ovF3a|i^B;&Kvpr;{)Z(Vs`xJ9w9|~<*=WV73PeLsNhOH$ElNg22cUzN~pb-tmG&+9Zvu_yX70vimRNPE!{;?7@&*(vou6ex_veIrY?W?8%>)-l9DJhG0x%myav<D5q!2XCjkFMj>5Dk;SjZBDL5_?J51qUT?cMDF+TmMi5ag0!Kk6yaqsQ!!OkEh+LFpMAD?#<L0IVi;1>Lfp($a0~>DJzy-2OVA6J~VPMBrry#^C{GfPI9WNd+(ysvyQ0uV5W*M71(rkoZuF0jzo=U7>%e)2qI?sDpw$r)tLe_w&q~33`Dh5tSET)X6ca`5Yy22#!iq7ciTfrjFaZbLN;%vUvO~pbnL}MQ+xv_f#W9', 'Makefile.am': b'c$~FYZI9YU5dQ4_6(d0EA;spBZ$+Uxa?leJFBP~|KU6}Cy_n6dU$nbUxa9KRJ8K)mVY?|3_><Y0d1gKH%nR-IRUguB!;C(&Ef);7u>_hhsd*aO-@gkQ1t|^KW9+jZKge|*w+UH}r{m#jJh*q>lfTBx)nqX@@6J7$4(Ctr2bCLqLhbo*HXf9h?A&FlT|(U9@@ed@){l$XY%zy{Wm*3a>mYY%s^c)0TW7<g1_{;L3BFZi0gLL5jG(Zo$dX#CM8+GaKBp>D?2R2EZE$y70gpV9`V4%`P{b4jF%>FH6pxgqLf9e3M!f^aXNl@L{yQ-KH(a1MwArH#jeKy78kj7rK6#+Yx&VG4SI;Xl>X^AX4KZ_|C5@DydQ4uQMs?ZhL+9?mmabE3_<UamidZF!zEHt^s+sL`PxCmU@&!5{i6yk{#bE+c;7{m0)PquQe|Cuj(VA~@fpZ}*bAF_yabFEhhMY(qX@mO;!8e|O{VUiW*b)4Op6b4)7V+?%7egksX-Z<H?YB`n55i5@I^v3k8;*Q6@due=k=&4`MTs|%1EnZ<e8N8VN7pol;`N5#|7XMlNkh;y2yR-SrvLT9i)E6kUU{0iJuS!l9$+iD2Rnri8TminD)n0OO==Q<b^P()?sB*uO;+xpsSjlH!D_1PW+AeqBCM28p>Y!Yd?;Gk$Z+<dxJgVW`C!V6N$GUEy}lP5k5H~E>+?ln?Q_{L=BI+MJ0=<E9Rt%!a02>(<wqsY#_3Oxl=K?FRGdn$7^wz_G=d-i5+EPP-JaS}$$AIn-bn^~%@D;s{wK_T;Eaau5K-Q4OSnEI&w&?5TOObn7{IxoQhZd*pfc4H3VLR7nHhQknn4un!=8dsSGaRzv3vOiWq1akQ>CHhvrQU6M#`20Lm?0&EHOOEa5`enUeJ{18<0aXdD%m736jY!+j07EWOvPw&2j5ga3ocvB#O=T^QbktB;>G*p$lq@*rTHVc0VJQX85VLkKr1PSMF%C>~`*cmhLXRzC!qHQer2US(?c)nXla8bei41+q@9n0ym#xSHrEewhO_@BmUEv|2~<HR~ci^>F)_fqaty{vSkRi+~%8N&W4*bN*5_{{b_56);HBfEavTEXt|5g0y6q37HNhx*uov{5H!O{2hJmxvm4bkW8fHLJJiH_I7g%r6)y^_QZkhaty;M4<?7fzP~Yd<?eX9g31eJy{x7<;*?<', 'modes.xml': b'c%03Y&rZWI494$$3d{GjATAu*?tru>fCn(C7b4|Pm84~8+Pjmof{;dqsxgV1W7+=s`x2$z?5%;3L)6|icw62eu#>*iPBr-SxE1%fX^YzWj$>OC03RVZvfSX|V92R~6hGwT@hGeh{R@J2F_AG1zH!7hH|4fo_iVJ|({V}!uL9Y5lu05dB#2l1tjIMxZI)Oi4asNTu6))GtFN)uJa@)c-??=)E&sa=#g4;eGSnIwnRf*hiIloj#^2t?8AqzMoM84>u&UFM?0<JkdN+a~5C)-IC>wP&Qr&?NDUjslcSt>lqz5a`_WQ~5wRWF^>BD#j1RYtc', 'corpus/{{languageCode}}.tagged': b'c$|yN$S*BUE!GE9HhFe71vz#qTycp-srpH&Hf2dUsTDx6qSRuLXhvdQN~J!Sv`I|K0txBq>)8~i=9K{10POY|6#', 'README': b'c$~FXQEwYJ41U+IAld?r3;Ucc4@C`hSdn3E9<~&zi((jtoP5XgY1WB1Nf*b+`rk)M_Qj4J1i_LdKx~Q>$&VjN-P~wt=AE45@3O(~-zSjE7OhuZGrH-|PO0RxT)cnUA0ei-a=?Gmz=yS4XvmOO!Lf!-0MN=}5&l<X;pR@v8GNgy7c1(Z;EOtk;KRL#j3+|8f#1lsHEEiwf_+FM^~$k6ReM+ODbLZMm0pp#NBy(3eni#CwTMLxUe4#7%Ryyvf&X;MVuQvzF?!k`A^u=ImP%_dh$SNu^4FS{Ask1QUrLLhjPp`!EF&=5dm=rfYdHGpJ)C4G+3|qI8%FF(uawip{3HsGvv>Ua!|{*r-VTH~t5N|<LI;LCG;)EA^9mdqheKE*SS+aF%u5J$(?ko9egezoGTXSz$j&n%PN`{CAjH!{^if@*iO|@sQosxYMm;pc7^17G(<PsQoM~nl!QY+pU^~Om<#|4nt`@H#8y93MHSa9)w~%-^Ox4)1Gtb7d^Tb@rT%AWpD9gZ+e9N2<s^IxGm#OG6s4O*HzRnhyMWojnC54zvyh2TFNFzmEl6mc+mRB+2bxJYgQhFJ6#3n4|p=1mSuU8P=q#{NU*;Vfjwulp)9&R?tT@9_ph^$jS^{zCcZ**^^aXK|qE0rCFxD1C3M}F0YcH=<!8cR%}F>~41;JT6q32+9=kw)<{(Q6&hKH3uU(TD@7)ODUN*+qE^ml(4lGm0+R*bc?4Tl3ekc2G|9g}-wbL%J81A@ChYa63H_(&OCA*aXC<b`LPe_)gLJXCeAd;ZpRGLbufgS$U3%>1;v*A>-lh&=8?vIS03Cg(ca=ZYf>?&pd(`)AL`>C*V1o(D5EkfiK|S+c`2SA%nZ?Wz>X8E4FO=$!yVe+Kc~rf0)H+w;d$O=K9E-UzJ7|OBEXA=_~OD{=9#~W_yB?N&DB);|vBc;;nVNL`zi!5=y&@-uFyeOEY$IP#*4@CX^bM>c_@!^&{hFgW&U&8O05xjE9d_GVd&>!5uf_rcD#Wc3h|j!fDC*ed$A(-fI;C`y39}uK=>qe*ng1*Nx^|`_B=$tpOJgm|hfsjBUu{uu0S58Aw)p-%iHkrCO++eHta>voxua_lK141?oY|uZ|gbDa~d7uDIOdqWFZmjh*JYwk7MIZS2JdP#wH=?$E;G+013>7h>ETJkq=@e0nd+xO+h>$4`_V59hn8`Z)+)mc}WUbdH%p&qik#r~H_HxzWynNuX?zRTj}OenAb6Si<<-m5+NfeocKr-eKBNn#Meym~tP!PCuPrd||?^KMjV=s6uxoXBsDb+}zwkiuV@-o{9eeA%oyH'}  # noqa: E501
hfst_language_module_files = {'{{languageCode}}.prob': b'c%1EBX>43q6`niq&A!;4#p|rL<9(YM@3Hf~aqKurZO8GJmP$2Fvownx*KtB<RYXMv0)g061Oib3MMW)3TS`SF5QwEzViOgmls0Mwq7)Dkzu+(Dy_tJwvqM$6wUXSKc)ss^_nh<Ya_)VTNbzg5vFp4P3w_v_x2>)%WFH8+9d2i2(BBj5i6^3ocru!dxjY!NV*zPQVi{AIB{r86<}!ja&*LZ-F@bq3ScSMB)47m&YMsGCPB=%x5gc&l35(=0PBMuTSfZaf+(FF;afliwtt6$1q{(MV&oe>2n4?caFzb;D`A%R#C9flTHY+FOIb{*XbdDa#xlHF9)K!}>(lnGgn{l1P*=vq-Gff>?$Zw^2!Ge-8U0HSB7{LOMEtZRNWMzeqbO~cL!4tTh^l8i%3N!>uPEfPcHfH4nvxz*O%;PE5n9xPso=GrGqaDvseX*!JIz31(Mo6w@)=Kj+Lmk~u5l6T&PnpKJVf0)v#yev%re9yVg$!Mwu-OdNGfb*khbglj;K)Q}^64|0C{dCnN=h+icFI~<5{GbDA-6?LD@I{aaT<`RGH&RTIIdEpzSjFyDnxxMX#LNT!x5U;DSc6`WR4lDJBM_}DUEqMkwa9zda2Ci+$Kn(wDxRK-)6KQ!^~crD0gG6D_w;)FNHv{o~^53scux1zgW-KP)*s^I=@c!cJ0}`RfYXssx8>viZjm=%idb78fDU4tQu?AlFLVH;k4yjSQu~?+L>h=ELM&68}bTui?hR)%WRwwuH1F0M*2#QI@6X%n>pu~JsRAuVkL7}_#7qrfwEF<+UqRUaG<<Yr8TK2Rq0go<oC(gMO}^}g<{(aHDlX#7HY<>?6Bo&v~Bux^F$TV?aa6MHtV$&s55PzLOX9K_iWpgOl;efO4{?9j6FJ>yQH!0Qzf@1R&wW2-9jn4bvSav%D=<d3sgEL>s@(D-pRPfQJ@<KaoAm|WsdK<ty`!-LWOyZ^SGf<GmhV;Qf;m=zqiH#A8{5dv;fg9#AIv>F%>VlQ(LyYRa;FaTfxydT5tjaMaSq!$%(0n!*riGd-s-{oJfz*R~D5i%tT*aER8n1!|8H+yk+GTK7SxsSyf$ATNesPqOo{=LsNT4XIEc8Gczl*GY4}r7jrWY^RhBl&MKIX`B{JkStYAt)vSiqvN{%GVHROg7GrT%&l*@G+ryezGizb3tc|s^4%W%KSU2lo36^9j*30@>KO10!Y={l-9nn60XJq+OvrnQ#i4rABl(=(f(qGos2LB&w|2E}bZ^2*U?&5COl|+dWB}#nk>Wc4Y|B`rP;pi*>NwqwD?ftjv^(EdKDC<nl=Z%fKeSeoIQKCeN5+zEMC{dzBi4rB=x+wph>E^`Ut}BTWB}$YiQKCeN5+zEMC{dzBi4rABlqgZ6M2Qk5N|Y#3qC|-jB}&{5|EoUmRMXL$4M$(S`22X{*AH^s?f$&`xZ8ClQKCeN5+zEMc%$HMe{YlDn<ei2dTwV+yfN|S->18MACM?fqC|-jB}%+eaJT=zy!`zI^7jx(lz3|+mQ4zOh6+<TGut>*%$%u=GmC{YtDQ5ONqarZten|%%)yyMXbvZ5PN6wnoVkSNa&zVun%l#fM`#`|XI`Os%Q!0&T3I<~<w7g3;H*Mu6+X^<Li71K^9#)%;4C1tK#;Sb(1MkmRSK=LinA)ARaJ9VEwt(y&T52KQ_ESc&}!>As}ovXh_jH;LSfFrLJLPYiwG?e<t!?+XpFO%&|-1U;zEnpb5<|3`UcJ#gx1i=S>qmFO?#R+YZ87<&73v2@Ya@A&RW|zYisAMUBtF`aMmHTj!w=xh1S`{S(nhdx;g9a;hB39oF$T+B~zTGdO7Ru<E&5Q>+9#NUugXUoDGO48VwF{HZ;uH@LtaL*^Eb5-eEl6GL1>QF!vizs+_ZApJTeHKPGtvCve${b!^~d#!%?vBsMc}%8XV0<04KgI>VZoe9xP)hE0YwhE;}BdX~Gfkx6z|%_cjcQq&pUQKi-k6uqvHatZ4yId0N>Lw8*v=S>SP<2cS!)D?wdvaTm}&@-IMI9}9KWs+Z1402Jo4Wf5zJ(FgIu5l$pSLwPZGE`5uVKeAG<Z@XzDJVfdN%~2tBpH!b>g^iN8hyUN4ZYvTxsjbF{km)VOswl8U(=^-lVZryLr<GYJg;|aL(PQatYY+?#4|cyBXKn|z!UnEtWy*X=rqY^aKTJjR#lo4V~SLYG>Dayd&%QuW;XOu=}WP1AG6ZcS19_lJ~9&?H|IU)TYp-nm6?sV{xX-mw|F)<y>q^7o4BptO!zB8QA*mlg@39e43Ab}#t(SICWmIx6pd*%4R30A1Hj7~UefRavFE6YuWEQ!!!sJ5*6^f;CoqQlHC)kfNuz0+#4$_^VXT2l{F;UrHOvDh&86TjhBU){jE$Jyj-ig4u$(g)9-*#(ld)k|;KuMZ#)h`g1{oV*O40_X0AqbcE~z5BsNLG-*PI#!mt)L>31&%|aj>96>L|mqg0zDBl;Xb9pHWsU?vSE32Q)WbRx9dovtM&*R!yP7;z+Qd&D`R|7%P$-#nR3i#l61nY&jxTT2S+8Wtv;FYpTYuR8u-~rNOEXZVB^Sv~Amww>Qh%=d)FHXkpEZ<HZ@?jfQuqrfv@9EiYl=PH_3KUXsc~n_n-)o$6cR^{d{&+=ZLae7y;>S+S;Id}psow?dObe@U@0tJ!9@D-Ok}x>UE#W2><H>_JDRBjgM_qt2MK-qqmR<8E>{ds;lLo;FX1x6|8Q)>D=&PnGvo^j8e}hJ1VdBmRAU&5yJnV}6YLG2zF7044)C7{H+b4hL{s08;@>2QU+)lMk~&91UWw2J<yosKsI}mTGaV7VoLUoprdY4$F0TZwM<P91r2{5Ke}1DvW!=I1|RXFwTdu8pc`}7s6N%<K751BG`=JQUvdd;7SDdMR0!v4@B^R2tF9agHe1aiie{3a1<Yj;-gV~EQ*gu@rfut8N;Vy_)H9+jp5-KJ{QC1WB5W0UyR{PF?>0WN8<QO9AAy&(Kx;y$76APBaX-8cp{E()#Kas_)Zg^Y{FB`c)A(iZNW1w_+BfXZN>N7aJ3CTXvYuR@uLp>xC1}w#7{f%^DaEsg<o{z`ELBO2fymUZxZ-z0>4Y*g(QBT!iy>Vp%*Xp;*WiJxetHp$1DAKwIA2|@!9}hAHbgn@s~mTbqH?^;cvrua~OXg#y^Jt2PPOQqy', 'apertium-{{languageCode}}.{{languageCode}}.lexc': b'c$~ddOKTf35WeeIj0rv!uMUMmof0r1#io7)+mJvhi&oa|ifE-pkF1SJe|tw-8+>T+B}519=+n$MFU<~MVQgC)Wh%*;f~{rR?E)7TN@L-8R7_WaRbt5+@%Bc@A}B9;&1}9oG=)))kO4e0>%o-ZS|NB1oOw|hD}^J&A9{EP00UT>prh_GGzGFZXSWB`X;oB09u+K82)L>THWIxnW~1TC*J$TXUK48~P6>!cK!F~1%pS<`D9hY;hNsYc4W(c{*ci_5;Rw0^MB&R>7@_+fNdh?;$7}~5yCNU_e=T4IYj}hyez!1zd)#NZZ{E?z%zM5MjgQP9o@e)~C9I9{gv6dj32w>7m8c><)1@MPfBSxo;Rf|iK<wyvc;^!KnRUc9hX;60#aqGheYH=i<GF%_)FwDFPWxpE;TE6p1az8?_{`VBnP9naV?5N}w_{2>`64sc3hQNPGGnWR(2d8r!wJb*u0@xhM>X%Huk-28&Gu$4_L3WYm1*w1F{&{8oatSz#GYR@nVgUj4n3Ep<T*Ne71~RqU5-DGOB#nfFVZI}?s!&8nhvy(n!ZZW(O=R(MPOPwKQ)cGFsv}0P-NURw8mR{5n9(}T)Hf@LhDTI0{x4}Z(qODo#Bqg0J7RQ>S{94D<S^?qQ*@O', 'apertium-{{languageCode}}.{{languageCode}}.twol': b'c$|fg%Wl&^6o&Wn6dy%d5_cVFrBpPel$+wT6-CH$(y=|nm&h}Yx$Y{JCt$^8Q;9d|s%10sdoh_*f(>F;bIzIh{_hO)Wfsq*5e(VGUht58>^UPIG3J2BbT=IGgr_{CyWlzY3on=u(tT&j5%w!5yu^OvR1h=6{^Sgay(A$eL-B_07YlL<O1jTf*ejOQXu2O58tgSK@31$#7xX?1d!Gg|z1_h!+!rF0MhkIVwK8YNiF(6>jf)rX@q*hEZ_?E!$HP6^ktR(pH9~AnWKpdox=9lCmX$}h%4D1CJz1WqGDRC%YzgHw9_;Mm1f1J(cr<c)+eEx_3w?Aey<Vg5Fp;`y>bcYdS7gR42SL!Ph3dykSsT?9{i;rVCkRdKI%OKgQ7PLfkIS@)QyHxlqVXu4-rX;atRvG_`7KO4+Cmu*oa=c%QGqXlnJR;ol5KFP%*nbjPP7?Uh5YMd>bT9UKd*`)bJO6zg3~|2|9-R%65=-<8o_A', 'apertium-{{languageCode}}.{{languageCode}}.twoc': b'c$}qAO>fgc6uj@R7>aTsBFj0@LlF&uQmB%k3J|h3?z6qb-nG2Xb=osh`30Q#xFGQlI8iQ^{}*eU1TH8@>}hsp-n@ASX`ZMhvA_ZDqrSoe9HM@U2_9mKM|h0p8b^47V?0H3g=eVW;{-Fz(R{)J&ryHCDPExdh?fEiOVnR+215M>5n?3Jc!TB#R!EV-pm_(2`Wtc-aA-b*QKJ5i3KyuaaVZ1_uLieWJa|36)52j7dpb|IbPomY3Na^kLYx#7={5GZ^V^BeQ$|~LxKW22bylY2Blc#L*>gg!IB}>nC$?l{io-;k7_QHVNO4)vo|vqC7kO_VfzJRy>yUD8QTqanZ((xbEuB~;R1hX>XoJ4$#t83f*}h`Sb{pxeZMLIQ-XHysl{(e83jV9o4a~^dvIxnI{U>40$5K{$rAI2Kf_0gVY!P>ioU`(bi31fFs)AIRxKuF(?Ipo<GGE+0G)zUnl}&$zIiI%D+y#a%97S4oAGy><o@=V)k>=Bum`0ALHlsfVW1m|tN1@GR;#Ik`;Nth<znj`cJ59&7$P>#dWE}>fHI56V4ZHr<_Q0QVniqH', 'apertium-{{languageCode}}.{{languageCode}}.rlx': b'c${@oOK;jh5Wf3Yj6x1rB5P>XOVU<C)KpdpRDjweTI|8zu->uu0p;IkmXM%U>1CyznQy+wZV#r)I<HRyI3gIt3OqrDJ7o}#jr8DU?Z7n@bOl?4l8jRoS{`(0Jem@DT&q@jv`)a3Eciw_z(2C>G!B4_KEW<%4bD>s+;Zqax+_d1-||`USgiBq3ckS2XYut09+IR7znM^)S3Qh#uw#Of+Lla|2Bi)zGAFZQwT6jw$Q$|wTpG_Vg$L-t_)O`eomTp?L6)a{gBB#rDHvEOQwJ?A&|B%J4p!<US>=;;v6!=%Vh0g}(Sii`3Ndk-L*pJ;RX2VBMO1Cb$G{{U&~D@6I4F{3{<!#+v$zx%OXwd`D5lUKy=YEfZ2!%~kv|1fdc~G^q%|Em{Ou`r(0Zv1Pc&pb&>03!wg{8)Dvu$z`~qb|#JRL6*v*Xn!0qihsS9&yo=Tz=X2tvmj3$@vMavQ$1zV!K=S$;#cb{bk<+N~B5Y;{_>yM)Gt-f|^OQCb3CaN_Geyf*C7Qc?Stk>VwR<^CQSIiy{%2Z?wYJC!9YZ3O@hv8_L4L`jDyz{}6RZ?fy6-TvKLUtU93T<3*u4I!p@aFr!tp9<GFO`in)#e?1@(jd~5ts', 'apertium-{{languageCode}}.post-{{languageCode}}.dix': b'c$|$=O;5ux488YPnA}^#4WTq#5J!Xr`~a`@R*N=?l5AuDp7di|4<PLj>Dhix@}8}qe}*0o9HKZ|tB2}d0o%s4Vt2Lr`g|=P)w3ydD^1D_3MW$lXzG1O8%}77F^ny5<5*ZQ<g2WLrdDrmZxv2GxUfd-DXd!NXly#ThWe=He6H{rWh{m?%B6(-4~uVN$xSSG6Knq$OXDnS)_xH@*~OEYAZ@J%lI&DEd9GDVWZO(!^y|B_gcsh5<vf!Vgd-d!bz;X4K*xbA_+W-ECI5tYly9lXb4aouDi?NB2H#yw<&G@}N-n@QpTPwNu^A3D{-i3)<;kl=zmnJ+O_=T9pwZZ`3c-+_v*BuhzurM%HB~$t!^=L*HstNX^?DV*-La}=', 'apertium-{{languageCode}}.pc.in': b'c${^Oy9xp^5JmfZ#T2$;FDwLnfQ^EJtqjSy4s0@EG7G|zfA<AiS=|ShbBofI@0~Ai^^WcoE}ziNrjKc^YKW|zk7%eO_6&Z3h17UVUo)Sk0dqfMPb-Pknsa+hw1oeIHPxV8j3qB&%bAVl)zAo%Xt~KCJqH}X6myMZAO*}3g5>(FI2-heDWSqu6n^;EZ)@Prr1j1A=gsl7JM6u44^kFeAp', 'configure.ac': b'c$}4#TW^~%6vyBB6jl{!L`q28buW{$$s<lcF_!^pJE6#Oh?AfIW<Z)wQNR0a$faGIspSFra?bz!&hfFKPFxRp=%;$EeYtKc3e<^dn}Hg_oE25PNx^QH&}_M(OJ>uQJv~i3AiUJBv`abI?O00Vq*<kVm+r|$=kvYGs;cs@z1}un$J)VA<HfRG>A|zEZ3S925`mMzvEUfhkgn&92)2oToWQ%WqRg`d7(+h*<tER0Q7O<M0kT{S1Ed=877@AY_%6a&KpFIbfzyf%rW5Fm2(sZ1j8tCcEJ->*tQrWr#1A~v9;sos%Q8AkShq2lb`-Gx!e(O+AvdEHi`H?r1Tz|~SvH@xpINUKWz}f(Tf4^ffhJACPFoolWHPmMQ&wQc0Q8AD1Pfk(lBW#NDB%%JN>Fi-$I%+N;}Ovfq>qW^3?>-)wcUzuwOXbr*{wN1LIz<UfjMVo_Nf9}UaSGnKuV+UN*zTFD<*<IwoW{t4<7%pQbO)Cc@<9$pH=lmGT>VuTx!=MA#nTz&j1Zg`;8;IdTyuR-w!by`TdL5VF+3$Yogan7e|k#d347fn1Sio5DToA0VLbm{KR!o(i<{oi#TIySg_xlxL|W~XkYTciZbSz6#1;(h#S#XURMIT$P3Jg)e%4kPg#Vsa?LGtVPMpa-INled;L(zZo(cTIa!D^XL8Vz*7cA0$b}vZ9Iv&Fs}+&<MB4XeaVG2W;!F?9GUKC|2yXe}3V5F5so^ia5#1qsV<j)kF+Pa1vZ6`CL_<&CL=Ns8d}6M)JoylG?QoX57XKi2t@wX#eWW{<E9IhPH{xmjPU2`ur1hJ)jpqAV_mTevRiI0(v1#jgGHBjFXA-y*@l;!MEm~AOI%gkXEsvzcU)<c_*8', 'Makefile.am': b'c$~FaTXWht6n?gTg(fhQuv<ggw`EH=Y(m@25a<By?n7r8#}-D3u|1NUklTOXBj1p(G_A=D6Yx3u&PC@Yxz%d)54BqO%D5#f>JYs07&d&u1PwO&)01Pkc3{}#+_T8b3u;zy3!&L)JQ~hNgVXL?^ldboUrs0Td-oKLhm%il2L%oO2JXr5YBWfdY@dXz9fTIc*{9KBzC52^T}>x=plRB7q$TvO5eRSNu~m1y;-Z3dP2CELAw<`HEYNJ?R^UlWDV!w4Xa$;Iy2@wXH7@?CEX>);bqKZaVof=wuIU68!4_<*OE|VY!{OoXQkM(Ear6y1l)u4Ui}<|PwccPU|C%}=4c2U7jp16jE7`CN4c<p*hQEw~&rsvR0AaY>?uoI1?Z$!`F1G@cu;ybgvOM*mxc8iJEBm;8l7v~Oo1v%PLYm~%<uenv-(%gw?KAZBL|03AW|m-^d$7$t*eHgE9LRys#$AVO%?fBqQlL#kNX%z!GvZ_Y4j*4o)*H``@rO`K4tqTNW$f9w0z1|__DeZ2_C+WtafL+I^?wLs9;;Hg95g2G1C`t8dLr7%60PeL4vBeM8d|Yr)7$tSCpvWnVVsx(>u+oE^mmnzNq7`Zt#d(RYG&~EtGRRR%gZiXDk4Ky(&lyEHdQmIdk3we7U3CJ8?2X`m0cOjsN9P^=Iq&(A226_a9DHpWWdhM2Gc+RZ9Es6Rk#RRr*Q1=4Rz^;a*}3AQtDCZuu<lEMNRm;3k6S=_EA0tmHDI?Yhh8(Lzm(1MjP2NN;FqA6x*a*JW}Wue_-9jx*NBOs`)Dio7(YHxbdu2qG}{eX>E_Px4oCRAMzek)*#J^f&@FPhONTFqAH5vKdwu%XrD3(Ur`%ham=pkL*$Ee*zQ_%n-Kuov=1{AUXbg+wyA3?!yv~ea+DQ>i#yNkG(Q_!QfNtX=pmuBSfu5*r2Z(&esz>m9)0DccTSmkTnvO%WPaYM<C7^}M~}<d-K(l$as8|7_ueV7qWI}lsees}h>T3ijm<TM^NOIJi&+4Nq~=30f5fW@AfN)_{1Y60zjWlmF#dYL%$)ngaj>~2=ItTQXQ^qA>fRfsNqpfk__Z<uN2s|7)4M#bIvE<$*aqt>=>#q82sd)v|4A^+rOkx(sB4jJce`<tXf0(=l)m?v#mj_n!JxA7oWlNtSVKTr<gQ07DlE!H*MA6)C>-k+hAEEV<FnJVV;SR#N-1jsCOe^S)SCJoX>n%<<}hy*=%gAHfR%KE=Qn|C*4a~sq9~BgK=E&=as;X%>>QXY@Vl%&<&G;;snYjVFp5q|F_Bt$&V9B%6@mNdUSw(DTcjmr8~l6pU+XCP-)<i%(^afZEb=BRu1wXPz&us%eZ2AR0~ZF1J@gY=q^AiNx)O2WQ-TcVis$cXW7u)(rM#+LDy5G!Vy-=W^w)2H9_<3bCR;x$>hs*%vY@UUJ=3O|Z4~Jg?lbR3wlS<HUk8qNPgr3}f36FTLsZ(YF14Al!NRcZgO*x()7ZzR$NWHT&{8Z+CFz}Oq=&3Vr&tdlH=&}o-yf>ULOfmvvc)!U_~_roY`DC*oG%8IV_A3?t5x0!R#TxR7l?%^I_6OPA6;8(;r(pXVVX7@+<F<^0!Nbz7r|=PycE>JIDMJ0%wOd%Ez0`wWi`k5Yr+T?Yl7uiNgZNgm~{+B!@KJ}NSv7!VB8Cs8Q)(^98?Jc01yJv-FK(Q*9IfKgt@2eV6Pe?*5e0Z;@FE{S`6d`FaA9IHd=oEIA2WXUq<6`mIePlz}cAy5!ZrMt-`t*9WRE9A!wL=R{~SwNk&!&A^+BfLcXFln1rR|tWha>#~5OVtV+C_2)Uko=MYH_qdKiDIvhg%b@+|}?2lheScWik$1@G5pM6<@G<o2Y15o?qVl-b|T+TY}lYQIK!Ozclb1SXT{nxFOWAx=@z8H?jq4u4cv)dtn!&eT60FDj|jo}uG+AF~iQQ*!UVz`0de9Jf=kA{<vm*deq4E0<hAydkY!xw3~JbSQJGz8%&iVtD!0urNnQ)RmKG2~w|mMx|i)9}^>a{{M+*CcXEOEy?$W*6soIm&Th69fiFxme%8Fm{$lG+e`Z;8498;V{baBYCS4vP0bgeyDV--2)W~d|dMUe_}A1aR', 'modes.xml': b'c%02u%Wi`(5WMFrEZ+@ndg&pML#3X2>f-}kvvI8YfowylqWpW;O(I2&NChcU4~S*G>)Dw>_F~x?O<M3lIa|=%?1mDs!d1%3g1)^zvU|ELXA9#h2<2=>$ahFAH&D>+R&y&GF5v-_yB&)grzuf3M6Pu~KOxW(d$6lkHE3mF|CtirNzct;r}ZjC7NSSkFvpm%7n)zH70%Qy08=*N@E{^RR%882>Eno51$D@O4w|Jwv$W9(N`8R31dGr7Fy^rn`%btm@}$r2N*U+t^(d)yWS9_yZF(r5k>yQvh_}k#mF?v_j)sO#j5l06_tDhDoO^oC66j^~#*vX=!C&Wz9O4P$O<+mnQeI2rZ-1>b93h9|c->7PRiy$q|6M8JY)csLJq}wHw2*g%vFNz~e5Xaj{lwbtgLEl;0Td1JzW', 'corpus/{{languageCode}}.tagged': b'c$|yN$S*BUE!GE9HhFe71vz#qTycp-srpH&Hf2dUsTDx6qSRuLXhvdQN~J!Sv`I|K0txBq>)8~i=9K{10POY|6#', 'README': b'c$~FYZBHCG5dQ98F-j{1qT4+hJ|sa()rhJIA6g<pR8>{Q`gUh;UA&&H?d3RK`R^Uucgr0IMb`o#ag1j?&ph*H77H!Sw3k!-MYecza|DI#(0bLk*<v_5ri#xB@&0MQgg9@M1OAZ)J}lirONO)xjy0?RKqt$~@Vh1pi#wQe__dK<%&CWxFX|nF5BJ_@d?dsx_?c|ikfy0B*@rYz&mHSiy><1L@)QkP=@pp=)IUq>GpaM!A(jnzIh}GW_bQ7s{Hs?MTQuH@>}kJ*_>K9PDXqaER?J9<Uu&8LIF4#RlNLc4=cU$IMPjt~M0!Hku=o9YILr_8gMAjSDq>T5rJOFOhf#QtzvJ)k4qm@|6ONkN`K9vP{Pn&NCv{3mMd-kghgM!9Gd~B1#^DHN2o_6fnTrZSCN<F|NPh&g*(_fH$jMG~A&#l-R49?BC+(xULKDfdYsrBL2G$0$MiHWGsMi&rft+ZrIf6fXj@$Nz$t;RuB3&cCg?wC+snxW%$bW^v!(qzLs$PqHEPGE}UAb$D=m=#Ms-{>o=Yu+Ue#wa|2M%gWEhn_MCFYUorA9>obA?x^sS9Bw)D@YR9vXQS5idiE5m(a7s3TUel!uBrD7~ITbd!=8MP%oLJ6J2F;Pn3XlicUfS&Ym&<x@9HBZk)ZRvM>Mdv#LTQNU#wGVJ+z7aEX(@HLjWgvMOmz5&-)w7)@ktgR)QZK@>{S;i=8bzP(zHYr{sB?2~NvgnVE?MO`eW$`-J4$5iV@Za3jknV+9K)t~SuE!=qY#ewMJAnAqZn5Q<+;epPS*m;^YYBa<pWD=etUaURS~eko5b<bphKSIu9D`f+!Hn!>$^*0MNQY|Y5lHaj{Pf4uBk&weXm^jM#24`Q?O4ew$l>m`$=Wb@#hUFfs4co)d+|T-52G3Fx`QNHT^}pwC#BKFRE6$%`b@ln-ydGM`IbQAby@tex1+^AWXm<?W$9JPX)Z$@N;}^bfS-}x4M4EC1;9UMSf;jTau*9#U$9d7AE4~WMX(4^K1<(ZoMmql4+%(|MyY|(i6y9;n;lVEeZ3nfHVBxGxo3DpDC6OymE2jDv&1uH!edF^f_#Lej-20?R_fm|J!lol3Wv*Q583E{`vOZ7_HeH}+;N^7t7WN<H-t|vzivY<4WFat+6IUR+=3J=<EY{cwP}JrLnAiccSqy#OkJvt2S=2QPtr6`-XBwbkm^S*zd9bR7t&k|PqB-&W)+`McX1lIzU#>PXIl;N&DaEQy}NIt^Zw$r3@?VbU3u(>`I4U4GCoc~E5~oRfe+{Vy8a;uU7l7Br*w+BLC;1fXUF{i$2TkO0=Nj2E%VwU8s;yk!5&MPzq|7BV8+kQFUWgdJ4zdiM>v<<hp*?KPS3t@!7V@SkGP^r-B%oG+=B6G6NUoscqTj-{{TASRI~'}  # noqa: E501
bilingual_module_files = {'apertium-{{languageCode1}}-{{languageCode2}}.{{languageCode1}}-{{languageCode2}}.lrx': b'c$}S)J#O4E5QTf4V#3mhq@)WL`vb#(k-}B5sfk%}ED@$S!jQ6d59L$jVxh=vwnz%Y6@lU7_a5JD59iUrD@m~Icj{~NMFIJajrILb{X9O_-_&7WZDn>8_7%YPQ(Z$k0gi(Wu+E_ym;(h+<VpHpZ>RtR#DO3R`rt4oIPf#5i5C(D%RnA%ganv`Ix=M7bOE(kZ&Xw8_r}15X8~S(wh6G<I9Lxk%pL|3`V4bONwb$wNb)Y}PULu5BOvs%HM9cjdS9*a^V@8&9WizTI2uRX73=nYH-9om?88p^=1vt+k_B?q#jEc2`J40#Y%?+U*Omn3OqEup(I40JoAUi3#%a^Gi+!;TP9)LJW5d$tN&B4_9a;Ajb%-dDj9$ypj?T72r%STby3Q`|AU?1UX<OFE`h+3z{z1J1^7NrMC_e45B-PKtqn=REIdU4k(Vl(%chIp+ELi1r{st{3>T3', 'apertium-{{languageCode1}}-{{languageCode2}}.{{languageCode2}}-{{languageCode1}}.lrx': b'c$}S)J#O4E5QTf4V#3mhq@)WL`vb#(k-}B5sfk%}ED@$S!jQ6d59L$jVxh=vwnz%Y6@lU7_a5JD59iUrD@m~Icj{~NMFIJajrILb{X9O_-_&7WZDn>8_7%YPQ(Z$k0gi(Wu+E_ym;(h+<VpHpZ>RtR#DO3R`rt4oIPf#5i5C(D%RnA%ganv`Ix=M7bOE(kZ&Xw8_r}15X8~S(wh6G<I9Lxk%pL|3`V4bONwb$wNb)Y}PULu5BOvs%HM9cjdS9*a^V@8&9WizTI2uRX73=nYH-9om?88p^=1vt+k_B?q#jEc2`J40#Y%?+U*Omn3OqEup(I40JoAUi3#%a^Gi+!;TP9)LJW5d$tN&B4_9a;Ajb%-dDj9$ypj?T72r%STby3Q`|AU?1UX<OFE`h+3z{z1J1^7NrMC_e45B-PKtqn=REIdU4k(Vl(%chIp+ELi1r{st{3>T3', 'apertium-{{languageCode1}}-{{languageCode2}}.{{languageCode1}}-{{languageCode2}}.t1x': b'c$}3~%Wm5+5WM><SmsthVw+QH&<>0uX%9hCq%LwKSc#U2@FDPF=kvRy<XDdsNG<|7<j&5{2&C69TA_n*URtxlU&}8T2~*ixnr4OnY;TJze7#=K;JEQS;ZQAhJgTt5)jpbMyj~zgy{H0|7jRZoJop3x+;0)^8mn=K0uERqgU~4O#=}|p8I!(*^fhw^FHHC^MLv9sgOa(nsbU_28%j?5)RD7_`*X_#k7UD0qn7Eyyl2loZF=CNp0Ld}Mg3Q}j&@Ab-Jh~(UO7AD$v|QX!Uv2@%N>OJIz+ywL>TS?d87OAz6|KF!egA0SDJ46+<C71q;RO*MI}z6(;8J)Ye;Z~A8&r#ZI<Zw&HeUld<zx|XU^SENSB5g$DagDDk#r=2Lv{bETH*cMuuzAlOc#6*6DjIoexje)p+7d`VGcV2d<N21uT+lc@(myBpr<F$((?yIAg4oY*A}{$`N^4gRG!1f@Hz4<K8MUON@+ZD9Q5;<|hLKC>h#ANlIj#W1klY?jHe&lYT0S#iQ^xx=Q$EuHA>wE(tlxXIb)AxFDl0t!pwuz9$Xvsw~-t?V?glyl~wr@qyBJT;22tyB9}x$4wJ?BiJu49sBw4w0*eP_A{_N)q5D3vZi6u1ZV4*9bv(;@KK&q<BLt59#`gr1Geb6I&+nmSB>LZb5~w|>zRuJ?EVKX7pch', 'apertium-{{languageCode1}}-{{languageCode2}}.{{languageCode2}}-{{languageCode1}}.t1x': b'c$}3~%Wm5+5WM><SmsthVw+QH&<>0uX%9hCq%LwKSc#U2@FDPF=kvRy<XDdsNG<|7<j&5{2&C69TA_n*URtxlU&}8T2~*ixnr4OnY;TJze7#=K;JEQS;ZQAhJgTt5)jpbMyj~zgy{H0|7jRZoJop3x+;0)^8mn=K0uERqgU~4O#=}|p8I!(*^fhw^FHHC^MLv9sgOa(nsbU_28%j?5)RD7_`*X_#k7UD0qn7Eyyl2loZF=CNp0Ld}Mg3Q}j&@Ab-Jh~(UO7AD$v|QX!Uv2@%N>OJIz+ywL>TS?d87OAz6|KF!egA0SDJ46+<C71q;RO*MI}z6(;8J)Ye;Z~A8&r#ZI<Zw&HeUld<zx|XU^SENSB5g$DagDDk#r=2Lv{bETH*cMuuzAlOc#6*6DjIoexje)p+7d`VGcV2d<N21uT+lc@(myBpr<F$((?yIAg4oY*A}{$`N^4gRG!1f@Hz4<K8MUON@+ZD9Q5;<|hLKC>h#ANlIj#W1klY?jHe&lYT0S#iQ^xx=Q$EuHA>wE(tlxXIb)AxFDl0t!pwuz9$Xvsw~-t?V?glyl~wr@qyBJT;22tyB9}x$4wJ?BiJu49sBw4w0*eP_A{_N)q5D3vZi6u1ZV4*9bv(;@KK&q<BLt59#`gr1Geb6I&+nmSB>LZb5~w|>zRuJ?EVKX7pch', 'apertium-{{languageCode1}}-{{languageCode2}}.{{languageCode1}}-{{languageCode2}}.t2x': b'c$}3~%Wm5+5WM><SmjngVv|#9&<Tv9k3*0Ysf!*7MqbNA_z;$)lg}@yM@`8M;M~OF?#%3v6uW)ZiW~r)v}RRYR-Xz2rnXyYnpN?8^R2utZf_P$8V^|SgL%GL5W*bPJ~otF*p;>LE`bpqmLxL$x-WV#!VxN^2Ti<aT(?Ev-m5;2yNnKeog_WgoI4TTV{Rp_lNZ6w6CUj(IM;N|R59(JN)F_6&4ZXo#${48K|cZZv{RbCe$JvrjW*}$fW+j%`OAWsR$x4y;}8n`_#IdOksa%#Cx=y$B~Jgf_TzR^r$$Fhxm64bMwjWE)K+USepNhv{eHJzlKj-$m>8hRybMU6y_sDEI;&@*)6Cj!$VN_AXS|L%resT6>rz%EW)`g}(0L+nm8H9IPF=mPZF~&IPm39y*<m#E%V<6gqba;;<U_QK<}Yo*K9uF+5u6QJgIjjpd+*yNr7!YXR-y&;GU&=;(;@Ur>Wq(f$=7@rl;ZFzbgSSUt!I?32ZZ0l3%?Vl38Df1Q%K}L9{y||E;cBP+X3=!u5%c<vZmp2dbHcnWx~DX{=Gb-@WpzY{$bpCjBEjgI&xK4*9{7-1y)y|2j;SjasLIYGK2j', 'apertium-{{languageCode1}}-{{languageCode2}}.{{languageCode2}}-{{languageCode1}}.t2x': b'c$}3~%Wm5+5WM><SmjngVv|#9&<Tv9k3*0Ysf!*7MqbNA_z;$)lg}@yM@`8M;M~OF?#%3v6uW)ZiW~r)v}RRYR-Xz2rnXyYnpN?8^R2utZf_P$8V^|SgL%GL5W*bPJ~otF*p;>LE`bpqmLxL$x-WV#!VxN^2Ti<aT(?Ev-m5;2yNnKeog_WgoI4TTV{Rp_lNZ6w6CUj(IM;N|R59(JN)F_6&4ZXo#${48K|cZZv{RbCe$JvrjW*}$fW+j%`OAWsR$x4y;}8n`_#IdOksa%#Cx=y$B~Jgf_TzR^r$$Fhxm64bMwjWE)K+USepNhv{eHJzlKj-$m>8hRybMU6y_sDEI;&@*)6Cj!$VN_AXS|L%resT6>rz%EW)`g}(0L+nm8H9IPF=mPZF~&IPm39y*<m#E%V<6gqba;;<U_QK<}Yo*K9uF+5u6QJgIjjpd+*yNr7!YXR-y&;GU&=;(;@Ur>Wq(f$=7@rl;ZFzbgSSUt!I?32ZZ0l3%?Vl38Df1Q%K}L9{y||E;cBP+X3=!u5%c<vZmp2dbHcnWx~DX{=Gb-@WpzY{$bpCjBEjgI&xK4*9{7-1y)y|2j;SjasLIYGK2j', 'apertium-{{languageCode1}}-{{languageCode2}}.{{languageCode1}}-{{languageCode2}}.t3x': b'c$}4!O;6)65Qgvl6(*b$FPzva1yx9^N~~bDD&lAj=`^+KkH{aCpTFb8-K6aWZkgA9pLaZV>W5FQ*atc<tyvT|)sKRqY3xRtc2T^pf0cK|!~Lx8tPjmDn*IHZvD#x3Xn(oEZP`HZNhCR!j6fbuC<d7pNGxSQ%?xN<6kVi6o=rTvdN98vpXWgcZW@^ClxW`F7?{K%F+l67o%S>@tzQOa^m*b3oCH#t@;Y!36%5={&S02gTvT{uq;J+(t!YGy;&Ju*{4^gs@2ClM=2(wP9$+3V|8L-DjvD&N3BblMR#dAvEz|WV*)h6dy8nXFxu~tf&MF*JhNP*n<`Znqr=c}ZM?4)%9sqSaKBQTFRhF~A=xuZj`gw2Oh0x78KghkTphFjA)RlE@ukgp@q^CI-OR<eg3H$`zDg1`@3tN|25zlxKzrnN-S`>dkI<b0rTfbbd9T>kwC;DT3g(#FYt&k=-yNUfsM6e=!mvaohUT)GKDtvH6iw@Mts&4OE2U>%xZhvNSS<<-w0Ye-&vH', 'apertium-{{languageCode1}}-{{languageCode2}}.{{languageCode2}}-{{languageCode1}}.t3x': b'c$}4!O;6)65Qgvl6(*b$FPzva1yx9^N~~bDD&lAj=`^+KkH{aCpTFb8-K6aWZkgA9pLaZV>W5FQ*atc<tyvT|)sKRqY3xRtc2T^pf0cK|!~Lx8tPjmDn*IHZvD#x3Xn(oEZP`HZNhCR!j6fbuC<d7pNGxSQ%?xN<6kVi6o=rTvdN98vpXWgcZW@^ClxW`F7?{K%F+l67o%S>@tzQOa^m*b3oCH#t@;Y!36%5={&S02gTvT{uq;J+(t!YGy;&Ju*{4^gs@2ClM=2(wP9$+3V|8L-DjvD&N3BblMR#dAvEz|WV*)h6dy8nXFxu~tf&MF*JhNP*n<`Znqr=c}ZM?4)%9sqSaKBQTFRhF~A=xuZj`gw2Oh0x78KghkTphFjA)RlE@ukgp@q^CI-OR<eg3H$`zDg1`@3tN|25zlxKzrnN-S`>dkI<b0rTfbbd9T>kwC;DT3g(#FYt&k=-yNUfsM6e=!mvaohUT)GKDtvH6iw@Mts&4OE2U>%xZhvNSS<<-w0Ye-&vH', 'modes.xml': b'c%03bO;Up}6oB_VMa*=Y*2ImAwl19U1iE%Yo5qYGFd=B24qFf45j}}PDE^dJpjg{gNyy9l-fQ3+CReLaqbFe#6`3ifqjQXenMVs{<P_iC-jGXtH5*LAXd#l>V1Ur%j1aV5Yi?x9rMUJtXqKV(*SBA@%+C^1#N^?~@K8+gRw&sD!$_ILajmELMI;zWVHP4tWig!j4gHp}iiK826vKSNM$+=IOrss~6LUnK@n(fzvsAhR$B3sc3M0E51<K%Ym1$h2nhn-#wY>MEfEJfluV_8bT>b%%-yTFMvu9a-ejW?!R2mY;r4$wsiH58PN?tU?@!60p%R6EsSN5l&D~M1;%)xq7aWwWPw!&F%lBKZU_5u!9(DQHwN`uh#neD1f9rjGE1>CQO6I8YbF27pZ2Bys#M^|5<-Rt$?d)BIq6L$WPn#X@DmGvu??OSRbCGLMKz35lzMaN1vPwkNQe002z8jRpqu!dJh+!G?+MX_Nh-**1aH(O4|xsD;3vs#(cHZo^hu=FT0ujS|<b5_Y5_!B$Iyq>37=IrlfUXRiwbM{l_ja}&=^L=_#aU4VD@ZmbR%;D50D)V~a)-ngfPf+FnYg?Iv;io5a0JW{m!SI919Da0K$sG86=_qp;qK(YyPMH_K`6v1ZpAaiB', 'apertium-{{languageCode1}}-{{languageCode2}}.{{languageCode1}}-{{languageCode2}}.dix': b'c$|$`&2Jl35WnZIcr}NDRL8WvpyIkp>wW~%#LY*`r=sWGvG=9B?`_|Q6LSI~;Dp4T11d-e4oFByJ+w$jb<6(|{t{+)?Zmq?i5e*fkAJ_Jc{B57=DB<0C`-iztW!o`Z(Uw}w<SPFCRTcUy|uS{r~O{*MsKAXtH>il+G%e^2+_UJZi_yQlm_7w5HigZIRr0;keb6)(QX&8?n2y?YqO`buU>t9{QQ^W=TB$f4sS-cUVR_;XFtI0+3&O8j$eFp{NlUOo$=k|o?4&%aqz+857Uk8zTPxjv%hA~j$izk51u@*+ivIe)7L-w-Pb>dz1j2G-~awOd3gBf=%eY!UwqQ-oY-3_th*RSu5`ENubXB=lZv?bq>4j1aj1Nvbj9e21S~9$FjpfmHo7J1f6?{UrU|;$X#(>W0S>Im!3xdcC&LtuT6O$Gu)|9N<tmaX!^lkBVB9ycEHgQza2aa)3;0?%QmMjxo<SKpunh|rcMazE;#q`5PL?TiLLoha66pgMhOL^7oiH>Oi%)tiKoJ>z5Oi6296K_m&c0>ZZ_bwSq|RQ83pW);@jPa3x$Hu2oMQ2HGs~6;R2@*&>)L}o0NxiFA27O0^aL2sH9=!tE^4x&+IvfC24!j(Smoa2MES1Cjh<%IZSASs+9&o5d}PK1f6I)u$$-YhSPI^<W2u#sd=OI_^|jPnaH1nJ<sy-vUS3Bdg<rX5qy{L%ZkZNT_Rd=v5ihr4R9yH8oWpVqD^iG$>c;B47-+!zfQ6M|L$tI|3^g+_&Vh6D)Hm>#X#_7jFY+=9RQ(kSzoO$a;a4gAs$GUR+OMbhO$eSjXkegw-UeENBc}P^0Sq4okbpA=d|$dKq#Qal2TM6u#29p3xm<_4F@^77y9=qL2aE#+_X9Iga^?~Y(qI{=W5(OU0lYE!39HfEbWDnBUC*a5jY`a1kp2?5k#my~^rp$mNx(EK8AY@KMNx1(98*EyccEAwxZ4l|^`#FP?it?l`jw|G>p=ilv@3Cl6Ai<viaB7-nAh-x>8K9^_E|MjOx<gs1~=gh-H_!;v%lR&8KNUD%`|W8x>~i^nFO?Xq73jrBup6{G3yz&0p4#^?HSb=My}p+ZfOHM!dWVEY4NNoPdOUX{44*@rAap-G<niqYgie1f?X>oyqFjjF%{^PCMVyS;(!J8N4#xDLN1mB_YU>V(OMdm+YRGfWEx2+M{|Zp=ab?B&EZbK9Hx@LO<4WRI4^cQ+L>fznQLv?odVZ8g5AT1PtaZtQ?A7Xrp1H|*cJ&)0#Jr8E5PSfOvBh58C4iFNzd3E&czu~=5a?!nAR1PX~O%`B?Opa%9_9p7?o8FMd>)@=sv=bw$(T}pOrodrWT%ssX|VVU>SI2<OEM^67v|hjZUZSjaD^&r=s|X518`7nxeh7Q!$9*Hi!j<t?yFTcI(7=p=++j7Je{#E(v4t<0zzQ*}yBk-Ol_;T0Ws&wbTn0<HjHrju=190gJ~=9ZTd?uGAl|7*wm^^u-Fz=c*`V-MrULdx;4Sx~_V=c6!}T+Uwe0B%NFmx@x;AzP9*}#16~@TB)+o`*iiQ8}DDc@ZXoezWnFqv(FK^Fj3Lx-Fj}IAzRW~Q+laXbDGs<g;6$Fhhkfo)zx7{t0?wXx}D|UC{~J~t!#rc!A9V&m9`V_^J|^Xp?a)VCH5SzLbi(Ug;LVFiSJ?DVr061s^|@9Yjer|CLHc>$U?&y_6Jhg{d-%FcDLSQ^%m*+AKqxSqW', 'Makefile.am': b'c$~di>u%ae6#mUT#nBR}WmS{<<X=>}(3Dn@k~9ivRjsN;#vZ`!_#%5~$)<U%eT{vlJ!5R}9Y{=($YsuL<~uXzn@hXh=!do2aBY0!Gh1+&c>z2;2*aH(jXA$D9Iih;YFf4lA0Jt>eP}cG=kRWH`RS(jx~q3zv#Y_)N4>WVd*NBCCs8}*+EsUM?}i^PKkL1dmyu;hTmONbSc1KzK}%E^dp8&jZwA-Hp5gOA+DnIIu_Ka>2X`Nb<I&{e)AjYI8|bxKUs!9a&^4CQbG%^Io!V~e%fo{`oA`k@)iX+}MHwc-$Hz!95UZ>nHLU%xSW08c2b<a=*2zl*UsXuv+)ek7{>6fhzfod|PA<CC%lu0$Z9OZrVkKCZQObdZTd=Zvd9X6w#Y(WS5-h9&OE2gY!P0ZlOTfZXuy6wwW2_D1g&l(Jnqp~juxL5DJcPMth%j1}wi`-A2+g4xAHIUF#r^QKYrTSGw0=M~E3z?M3%W`T)RGR*S>Ny{vEx2#eC4Y0;kll$)ru4#1H%oirOAV^`6AH<t@xqVLdhZ!3~?XYH2QLzD8-9eD0Q}mvShI(h@M0FO57xYwS?6Cz;<Po=1&N@1uw!=IPFhHw}Xq}q<=bp0dJu)x*;WNsUB)_C6RuE#^Jwz;SJQ<)VWmNVxP3YzH*a%`mpq={M8%PIgQL&i<=7%euF=LryoBdiV^TRU-_7}H{5$IymzKvrZcAJnug>qeL>TAgaQrAoq^_6n<lwrn{=;PU|X4#3zg}??PPR!p?6AD2;T1epH$jUUjB747<b_0O)};rS8w5@Umc64#G#@3saVSSdVUB6p5ucE;wBZg)eoFRgH<rrIn?2>2aZYR9N!DMMpK^_d^Dl-de58e)i|%rWaLH$w&QRs?g4#~KnKm<ZL*i&0<e2oDBP2Z67!aj((}aBTj|f32iY=X`YQcuW*wYX<*2+kMT1pCfs?=EVQjlj<aR*SB|7ARA#KmCsJq$9Tf)Eft1!_>A+ZIWmHDehI95pGy5Csw5Qf1V!(bi5;NA>_Ph%K-0>fZE!{AdG26r$F{yK)qhdO{^N^+U4`dG;@*eOwY7Q<jwW!W#(a~Y-(z7B^yaNLt&3Z4rLQ{ucblZP-&iOF7mcQ8zaMXK0go?-AA^I#Xl?48y$!{FWwgZncK9?CG7r^zD2<RPhM7)&#aUcoSB?(z)N@S%v#Ut?oFr?REaeBubFuH1b_IiD&?#q`M<r6I~2HQjZ>=Di&n&eWz!q$UjnOF9xC6{7fdB7;)uf+>b;^9QLD0`qk(C}LOeh6Qh!c*AmUO%IkpeP<`feaki#u0~)V8P-%eQD7u@cWUe#9m}TCZ_xQ}2-_mU*EW5;CrGl4R$A(s4HJkXCgO^(Y?IOua>31CG{IAsXq6C&fFPnDRnvN>53KOf^uP$ikqnlmTn5SI)r?B%@llMg2`dpKdD$e}^iWN)jhMDIR7y=AhG~WTK{39AtPY8#A)}p_xmdd2o)q+KN6@p<ptR?chs8`!uUc@id2n$DxOfb3aR<2AAh=Dh1X^~t)QRnG?$;8DzjNc}m+agso&u`x7s{M8J+$=}hc?&KrNXay=!T!icZ13M%h9;kQlBrZ)vB)gbz<VpN-^%VrZrnD#(MEtZR|SdSnnLS&ZD=P?#dBIN%Q6U1;{u~nv*IpDLlGP3eT;U9rR9KuFuk)({Nz~e6uM%O<{DZPIe#EBNY5t*yaMlg|`$IOnLI0MJHzI!Ct=359;FN{a`%kt)JVnFS(s~64y+#S~>2JpVi25hkxARKQ8Hn>OhF-ycYri24=vit`o5LAQv3y#KWVf!&e}vHqcg`Hi+N3+Tr}L$?)qklrXoyb5I8`!5zwvEf?Sz-#BPrk-47A&l<xhO8WXcdRn9o*4;Gc#JOt%#*)`eq9a2S9&KUIvoD-SSwR<q8}8C?e(_vf4F@+LF0Y0o=s{t^F;m5jhsj!6;D8p)*7qoIywQ$%D4QRu<m&o_@|0Z2(vl9jx{*zmCukOQp|D1^!WtzT$vJeDOU;q2)z5f*8%wA(kjS!Uvu#7l=zv~ep%;2ny-*jTCGG5g0i%b!', 'README': b'c%02xZExE)5dO|zaYzfSE^Ik=K5PxpVOfSQ0oEl*T@1r8M2vKjI8&rbQdNR1|9wZwc5J6!UK|0j4OphgyL+DJj^g?HT5^@wJjdU8iKCkv;3|ddmC^Cd%|67uLgPeT4sLHA>eMe;8=>hjd;h#I#wLZZKp(E)U=|6?y+Xx>flM24hAS(%6Do%bbPb|f12coj?m&#-kAge6(lsRHq_zmo`&@F8O#L_c*=Ou6Odjg%E}gXcqc&BcrOrjdCC%dU%91yoJ;KH*H*TP_fvpge0vykCAIu|cun$C<Pz0$YAX))^T!94IIV3t84V4zk**;iAu=PcOJoQd?{K`@rWJ}9;hzO~hh_N&LQVWA6(poln-WOwkl1Pn^5)@(@0?xD~$38HtGuLo~1j{-uC8j|w>73T`LSMq0AK$}Xv={C6Xn3C0tD|3ql}WxA26v-(^d9Yw-+kY^z82Yeky%G`{MT&N57D^CW_N-xn`>qB%^=5d)+Sx5(Sp(rN<Kx>?uzJF7W>d37)*3Y#HJxvrPfp6ZXcSaiRPvwZE_OfP?wdEM9T9k@T>TWZK{|hrAdA-!GigI2+<b0mMPr>ej%x<H2hN&ccxaPOdQ9FR#r=7uOS-JbtdxK_+K77d(~1fGwG+d^3Q8Dj)uH;I!6`RA`bH?LwyazOV<1iT0-+FpzkO-k_9!H(Iq8KZ4!)t`1cVn00inQg8`%!4)1ISmZI>OIg1Aanwg2qm~zt<tN!~f3`^IZfOdDG-&BXNys#ivi5TT0TLn;15Txk@t?NY58T7Vt+Ta2ykdnHI)8-0z<~M~|cmYs<wfLCNOxkJeT=Pbo>AJ|YRcY9nocwYEj==cLcBshFXb1kiEyzI%5j@~o!)`6jcYo6D)+qZwm*e|fj_<e}-RpAPX6Zp-YnDpw&QxOKW%LBcuTKvqNAac#Ni|^PYxpVDJqK$6!UrMIhDS%r9e@6udkcR(>Rb^$WKK$j^!J-C%=TaaKZjkTre}64693HO=BgVUZqx}5GV5_17PXrCtTeUPc>VB1&wTyOGsjjyzgbP&1Knu$X+THY1KmLVxEn>s0q8N+u1P%Fm!RpkP&b-=D%9>&-Rnlxy#V!8TlZo_-4^Lavrk0YnWoZoqA8j6NPol2(DhlA7@i?7K-;YmZ#26l;<?5pS+vn*DJjgwwYR<K!^vv6(RQ`IH(hRRyEwfR&Q<%vVI!turS}RW!{heo*LuHi@?)64*Vt#@lALpOzUX?-mrg6}2xS#cb+)c5ZCq!~L}<?o@2zc;*8flu21qG?w(Kwdc%jp-<B1DR`$ry5TOfs{4tGJ3b#<2g<OglkHYucXj*&v&m>-`V?nC@)K0EgRX$X@<nL$)Upq~bBXoUD%A0IB3^%(nvbRL&hw>=IWg((XUK2MHL&OT8N&aQfWO0q=ODIpDglkeUsG9xZ(Pk6-s0}d*++5', 'configure.ac': b'c$}4$U2md56o&8l6?0*-m?*Zkd())5nM|n?L0G`FyTnYWjyNfT3u85F{O>z6fUWLo<%W;pocBEEB{>Ho?6|tC|4_Ty*KSi$Ai~Db@YMh=Nyg}E0k+#XOrlj7kzu$X*SlT&@T9xjjawkN(z@D}c-U^qBBXI~8kQ;_a!@)wQV}Pm%AB#~U8l3AuT-mYwKR+5Ne9+ZYbwx^y<j-<Z3_-`*`4FsJ!}rKw|{|814UWf;whQYgs4GAey?aornmyYZzRiUnh3xf?UuLMRGdK%qrQ#?*s>o+rtYcG(OusdSuIfIfp7QVq!`x{dY9<5Z?x`NttJOjwp%*G^I6VhW6<x*?$n_F==rApjHJE%b2}!RiFlcXaZbcTLqy99_H+lj(6`;jnzFf+!y>-(LKESrhmA)yU?gW?)2NieJ=pBUcyY_?Vcm6YR}FrqD=<xyFAU7XHv;zc0Znoi#xa?WCH%k0{*!IKGqZIX*MgP_C#j`)O>C)n#9cbR+Z}g+ddRjMAv}rNlXS7XkbM$i5&d8ALi2L!vhsPWQIFqI3A)VEOHJmWBKicV(5wY2w9bQ??sH{noNelO%EM2aTFPDyTNVG5w(?aZ)G$`io^-a9tw;Nrx1Rb7L7yu{e<mRV;_}XVOdvupFE0g?Gy{e75d@#PbjGJHUp7uT1WjYu8@KpmJkmV~;ED_s(|XzhG~W+OZE?$M0EkQ*K~r}49e9M?f%ALCD7Zq#XDMb`x_XI8K2K9dlc@CTV|_KaKEK<9YljKlGYQ4A5*gOO7$S4@P;4rD<U1q2iLLOJ_Zo|Tq5K6#4TdT'}  # noqa: E501
# DO NOT MODIFY, USE `make` which calls `./updateBoostraper.py`

english_lang_names = {'aa': 'Afar', 'ab': 'Abkhazian', 'ace': 'Achinese', 'ach': 'Acoli', 'ada': 'Adangme', 'ady': 'Adyghe', 'ae': 'Avestan', 'af': 'Afrikaans', 'afh': 'Afrihili', 'agq': 'Aghem', 'ain': 'Ainu', 'ak': 'Akan', 'akk': 'Akkadian', 'ale': 'Aleut', 'alt': 'Southern Altai', 'am': 'Amharic', 'an': 'Aragonese', 'ang': 'Old English', 'anp': 'Angika', 'ar': 'Arabic', 'ar-001': 'Modern Standard Arabic', 'arc': 'Aramaic', 'arn': 'Mapuche', 'arp': 'Arapaho', 'arw': 'Arawak', 'as': 'Assamese', 'asa': 'Asu', 'ast': 'Asturian', 'av': 'Avaric', 'awa': 'Awadhi', 'ay': 'Aymara', 'az': 'Azerbaijani', 'az-alt-short': 'Azeri', 'ba': 'Bashkir', 'bal': 'Baluchi', 'ban': 'Balinese', 'bas': 'Basaa', 'bax': 'Bamun', 'bbj': 'Ghomala', 'be': 'Belarusian', 'bej': 'Beja', 'bem': 'Bemba', 'bez': 'Bena', 'bfd': 'Bafut', 'bg': 'Bulgarian', 'bho': 'Bhojpuri', 'bi': 'Bislama', 'bik': 'Bikol', 'bin': 'Bini', 'bkm': 'Kom', 'bla': 'Siksika', 'bm': 'Bambara', 'bn': 'Bengali', 'bo': 'Tibetan', 'br': 'Breton', 'bra': 'Braj', 'brx': 'Bodo', 'bs': 'Bosnian', 'bss': 'Akoose', 'bua': 'Buriat', 'bug': 'Buginese', 'bum': 'Bulu', 'byn': 'Blin', 'byv': 'Medumba', 'ca': 'Catalan', 'cad': 'Caddo', 'car': 'Carib', 'cay': 'Cayuga', 'cch': 'Atsam', 'ce': 'Chechen', 'ceb': 'Cebuano', 'cgg': 'Chiga', 'ch': 'Chamorro', 'chb': 'Chibcha', 'chg': 'Chagatai', 'chk': 'Chuukese', 'chm': 'Mari', 'chn': 'Chinook Jargon', 'cho': 'Choctaw', 'chp': 'Chipewyan', 'chr': 'Cherokee', 'chy': 'Cheyenne', 'ckb': 'Sorani Kurdish', 'co': 'Corsican', 'cop': 'Coptic', 'cr': 'Cree', 'crh': 'Crimean Turkish', 'cs': 'Czech', 'csb': 'Kashubian', 'cu': 'Church Slavic', 'cv': 'Chuvash', 'cy': 'Welsh', 'da': 'Danish', 'dak': 'Dakota', 'dar': 'Dargwa', 'dav': 'Taita', 'de': 'German', 'de-AT': 'Austrian German', 'de-CH': 'Swiss High German', 'del': 'Delaware', 'den': 'Slave', 'dgr': 'Dogrib', 'din': 'Dinka', 'dje': 'Zarma', 'doi': 'Dogri', 'dsb': 'Lower Sorbian', 'dua': 'Duala', 'dum': 'Middle Dutch', 'dv': 'Divehi', 'dyo': 'Jola-Fonyi', 'dyu': 'Dyula', 'dz': 'Dzongkha', 'dzg': 'Dazaga', 'ebu': 'Embu', 'ee': 'Ewe', 'efi': 'Efik', 'egy': 'Ancient Egyptian', 'eka': 'Ekajuk', 'el': 'Greek', 'elx': 'Elamite', 'en': 'English', 'en-AU': 'Australian English', 'en-CA': 'Canadian English', 'en-GB': 'British English', 'en-GB-alt-short': 'U.K. English', 'en-US': 'American English', 'en-US-alt-short': 'U.S. English', 'enm': 'Middle English', 'eo': 'Esperanto', 'es': 'Spanish', 'es-419': 'Latin American Spanish', 'es-ES': 'European Spanish', 'es-MX': 'Mexican Spanish', 'et': 'Estonian', 'eu': 'Basque', 'ewo': 'Ewondo', 'fa': 'Persian', 'fan': 'Fang', 'fat': 'Fanti', 'ff': 'Fulah', 'fi': 'Finnish', 'fil': 'Filipino', 'fj': 'Fijian', 'fo': 'Faroese', 'fon': 'Fon', 'fr': 'French', 'fr-CA': 'Canadian French', 'fr-CH': 'Swiss French', 'frm': 'Middle French', 'fro': 'Old French', 'frr': 'Northern Frisian', 'frs': 'Eastern Frisian', 'fur': 'Friulian', 'fy': 'Western Frisian', 'ga': 'Irish', 'gaa': 'Ga', 'gay': 'Gayo', 'gba': 'Gbaya', 'gd': 'Scottish Gaelic', 'gez': 'Geez', 'gil': 'Gilbertese', 'gl': 'Galician', 'gmh': 'Middle High German', 'gn': 'Guarani', 'goh': 'Old High German', 'gon': 'Gondi', 'gor': 'Gorontalo', 'got': 'Gothic', 'grb': 'Grebo', 'grc': 'Ancient Greek', 'gsw': 'Swiss German', 'gu': 'Gujarati', 'guz': 'Gusii', 'gv': 'Manx', 'gwi': 'Gwichʼin', 'ha': 'Hausa', 'hai': 'Haida', 'haw': 'Hawaiian', 'he': 'Hebrew', 'hi': 'Hindi', 'hil': 'Hiligaynon', 'hit': 'Hittite', 'hmn': 'Hmong', 'ho': 'Hiri Motu', 'hr': 'Croatian', 'hsb': 'Upper Sorbian', 'ht': 'Haitian', 'hu': 'Hungarian', 'hup': 'Hupa', 'hy': 'Armenian', 'hz': 'Herero', 'ia': 'Interlingua', 'iba': 'Iban', 'ibb': 'Ibibio', 'id': 'Indonesian', 'ie': 'Interlingue', 'ig': 'Igbo', 'ii': 'Sichuan Yi', 'ik': 'Inupiaq', 'ilo': 'Iloko', 'inh': 'Ingush', 'io': 'Ido', 'is': 'Icelandic', 'it': 'Italian', 'iu': 'Inuktitut', 'ja': 'Japanese', 'jbo': 'Lojban', 'jgo': 'Ngomba', 'jmc': 'Machame', 'jpr': 'Judeo-Persian', 'jrb': 'Judeo-Arabic', 'jv': 'Javanese', 'ka': 'Georgian', 'kaa': 'Kara-Kalpak', 'kab': 'Kabyle', 'kac': 'Kachin', 'kaj': 'Jju', 'kam': 'Kamba', 'kaw': 'Kawi', 'kbd': 'Kabardian', 'kbl': 'Kanembu', 'kcg': 'Tyap', 'kde': 'Makonde', 'kea': 'Kabuverdianu', 'kfo': 'Koro', 'kg': 'Kongo', 'kha': 'Khasi', 'kho': 'Khotanese', 'khq': 'Koyra Chiini', 'ki': 'Kikuyu', 'kj': 'Kuanyama', 'kk': 'Kazakh', 'kkj': 'Kako', 'kl': 'Kalaallisut', 'kln': 'Kalenjin', 'km': 'Khmer', 'kmb': 'Kimbundu', 'kn': 'Kannada', 'ko': 'Korean', 'kok': 'Konkani', 'kos': 'Kosraean', 'kpe': 'Kpelle', 'kr': 'Kanuri', 'krc': 'Karachay-Balkar', 'krl': 'Karelian', 'kru': 'Kurukh', 'ks': 'Kashmiri', 'ksb': 'Shambala', 'ksf': 'Bafia', 'ksh': 'Colognian', 'ku': 'Kurdish', 'kum': 'Kumyk', 'kut': 'Kutenai', 'kv': 'Komi', 'kw': 'Cornish', 'ky': 'Kyrgyz', 'ky-alt-variant': 'Kirghiz', 'la': 'Latin', 'lad': 'Ladino', 'lag': 'Langi', 'lah': 'Lahnda', 'lam': 'Lamba', 'lb': 'Luxembourgish', 'lez': 'Lezghian', 'lg': 'Ganda', 'li': 'Limburgish', 'lkt': 'Lakota', 'ln': 'Lingala', 'lo': 'Lao', 'lol': 'Mongo', 'loz': 'Lozi', 'lt': 'Lithuanian', 'lu': 'Luba-Katanga', 'lua': 'Luba-Lulua', 'lui': 'Luiseno', 'lun': 'Lunda', 'luo': 'Luo', 'lus': 'Mizo', 'luy': 'Luyia', 'lv': 'Latvian', 'mad': 'Madurese', 'maf': 'Mafa', 'mag': 'Magahi', 'mai': 'Maithili', 'mak': 'Makasar', 'man': 'Mandingo', 'mas': 'Masai', 'mde': 'Maba', 'mdf': 'Moksha', 'mdr': 'Mandar', 'men': 'Mende', 'mer': 'Meru', 'mfe': 'Morisyen', 'mg': 'Malagasy', 'mga': 'Middle Irish', 'mgh': 'Makhuwa-Meetto', 'mgo': 'Meta\'', 'mh': 'Marshallese', 'mi': 'Maori', 'mic': 'Micmac', 'min': 'Minangkabau', 'mk': 'Macedonian', 'ml': 'Malayalam', 'mn': 'Mongolian', 'mnc': 'Manchu', 'mni': 'Manipuri', 'moh': 'Mohawk', 'mos': 'Mossi', 'mr': 'Marathi', 'ms': 'Malay', 'mt': 'Maltese', 'mua': 'Mundang', 'mul': 'Multiple Languages', 'mus': 'Creek', 'mwl': 'Mirandese', 'mwr': 'Marwari', 'my': 'Burmese', 'mye': 'Myene', 'myv': 'Erzya', 'na': 'Nauru', 'nap': 'Neapolitan', 'naq': 'Nama', 'nb': 'Norwegian Bokmål', 'nd': 'North Ndebele', 'nds': 'Low German', 'ne': 'Nepali', 'new': 'Newari', 'ng': 'Ndonga', 'nia': 'Nias', 'niu': 'Niuean', 'nl': 'Dutch', 'nl-BE': 'Flemish', 'nmg': 'Kwasio', 'nn': 'Norwegian Nynorsk', 'nnh': 'Ngiemboon', 'no': 'Norwegian', 'nog': 'Nogai', 'non': 'Old Norse', 'nqo': 'N’Ko', 'nr': 'South Ndebele', 'nso': 'Northern Sotho', 'nus': 'Nuer', 'nv': 'Navajo', 'nwc': 'Classical Newari', 'ny': 'Nyanja', 'nym': 'Nyamwezi', 'nyn': 'Nyankole', 'nyo': 'Nyoro', 'nzi': 'Nzima', 'oc': 'Occitan', 'oj': 'Ojibwa', 'om': 'Oromo', 'or': 'Oriya', 'os': 'Ossetic', 'osa': 'Osage', 'ota': 'Ottoman Turkish', 'pa': 'Punjabi', 'pag': 'Pangasinan', 'pal': 'Pahlavi', 'pam': 'Pampanga', 'pap': 'Papiamento', 'pau': 'Palauan', 'peo': 'Old Persian', 'pes': 'Iranian Persian', 'phn': 'Phoenician', 'pi': 'Pali', 'pl': 'Polish', 'pon': 'Pohnpeian', 'pro': 'Old Provençal', 'ps': 'Pashto', 'ps-alt-variant': 'Pushto', 'pt': 'Portuguese', 'pt-BR': 'Brazilian Portuguese', 'pt-PT': 'European Portuguese', 'qu': 'Quechua', 'raj': 'Rajasthani', 'rap': 'Rapanui', 'rar': 'Rarotongan', 'rm': 'Romansh', 'rn': 'Rundi', 'ro': 'Romanian', 'ro-MD': 'Moldavian', 'rof': 'Rombo', 'rom': 'Romany', 'root': 'Root', 'ru': 'Russian', 'rup': 'Aromanian', 'rw': 'Kinyarwanda', 'rwk': 'Rwa', 'sa': 'Sanskrit', 'sad': 'Sandawe', 'sah': 'Sakha', 'sam': 'Samaritan Aramaic', 'saq': 'Samburu', 'sas': 'Sasak', 'sat': 'Santali', 'sba': 'Ngambay', 'sbp': 'Sangu', 'sc': 'Sardinian', 'scn': 'Sicilian', 'sco': 'Scots', 'sd': 'Sindhi', 'se': 'Northern Sami', 'see': 'Seneca', 'seh': 'Sena', 'sel': 'Selkup', 'ses': 'Koyraboro Senni', 'sg': 'Sango', 'sga': 'Old Irish', 'sh': 'Serbo-Croatian', 'shi': 'Tachelhit', 'shn': 'Shan', 'shu': 'Chadian Arabic', 'si': 'Sinhala', 'sid': 'Sidamo', 'sk': 'Slovak', 'sl': 'Slovenian', 'sm': 'Samoan', 'sma': 'Southern Sami', 'smj': 'Lule Sami', 'smn': 'Inari Sami', 'sms': 'Skolt Sami', 'sn': 'Shona', 'snk': 'Soninke', 'so': 'Somali', 'sog': 'Sogdien', 'sq': 'Albanian', 'sr': 'Serbian', 'srn': 'Sranan Tongo', 'srr': 'Serer', 'ss': 'Swati', 'ssy': 'Saho', 'st': 'Southern Sotho', 'su': 'Sundanese', 'suk': 'Sukuma', 'sus': 'Susu', 'sux': 'Sumerian', 'sv': 'Swedish', 'sw': 'Swahili', 'swb': 'Comorian', 'swc': 'Congo Swahili', 'syc': 'Classical Syriac', 'syr': 'Syriac', 'ta': 'Tamil', 'te': 'Telugu', 'tem': 'Timne', 'teo': 'Teso', 'ter': 'Tereno', 'tet': 'Tetum', 'tg': 'Tajik', 'th': 'Thai', 'ti': 'Tigrinya', 'tig': 'Tigre', 'tiv': 'Tiv', 'tk': 'Turkmen', 'tkl': 'Tokelau', 'tl': 'Tagalog', 'tlh': 'Klingon', 'tli': 'Tlingit', 'tmh': 'Tamashek', 'tn': 'Tswana', 'to': 'Tongan', 'tog': 'Nyasa Tonga', 'tpi': 'Tok Pisin', 'tr': 'Turkish', 'trv': 'Taroko', 'ts': 'Tsonga', 'tsi': 'Tsimshian', 'tt': 'Tatar', 'tum': 'Tumbuka', 'tvl': 'Tuvalu', 'tw': 'Twi', 'twq': 'Tasawaq', 'ty': 'Tahitian', 'tyv': 'Tuvinian', 'tzm': 'Central Atlas Tamazight', 'udm': 'Udmurt', 'ug': 'Uyghur', 'ug-alt-variant': 'Uighur', 'uga': 'Ugaritic', 'uk': 'Ukrainian', 'umb': 'Umbundu', 'und': 'Unknown Language', 'ur': 'Urdu', 'uz': 'Uzbek', 'vai': 'Vai', 've': 'Venda', 'vi': 'Vietnamese', 'vo': 'Volapük', 'vot': 'Votic', 'vun': 'Vunjo', 'wa': 'Walloon', 'wae': 'Walser', 'wal': 'Wolaytta', 'war': 'Waray', 'was': 'Washo', 'wo': 'Wolof', 'xal': 'Kalmyk', 'xh': 'Xhosa', 'xog': 'Soga', 'yao': 'Yao', 'yap': 'Yapese', 'yav': 'Yangben', 'ybb': 'Yemba', 'yi': 'Yiddish', 'yo': 'Yoruba', 'yue': 'Cantonese', 'za': 'Zhuang', 'zap': 'Zapotec', 'zbl': 'Blissymbols', 'zen': 'Zenaga', 'zgh': 'Standard Moroccan Tamazight', 'zh': 'Chinese', 'zh-Hans': 'Simplified Chinese', 'zh-Hant': 'Traditional Chinese', 'zu': 'Zulu', 'zun': 'Zuni', 'zxx': 'No linguistic content', 'zza': 'Zaza'}  # noqa: E501
iso639_codes = {'roh': 'rm', 'gv': 'glv', 'gu': 'guj', 'ron': 'ro', 'oss': 'os', 'gd': 'gla', 'nld': 'nl', 'ga': 'gle', 'se': 'sme', 'gl': 'glg', 'oji': 'oj', 'oci': 'oc', 'ty': 'tah', 'jav': 'jv', 'tw': 'twi', 'tt': 'tat', 'hrv': 'hr', 'tr': 'tur', 'ts': 'tso', 'tn': 'tsn', 'to': 'ton', 'tl': 'tgl', 'tk': 'tuk', 'th': 'tha', 'ti': 'tir', 'ven': 've', 'tg': 'tgk', 'te': 'tel', 'ta': 'tam', 'fas': 'fa', 'ssw': 'ss', 'de': 'deu', 'da': 'dan', 'ay': 'aym', 'dz': 'dzo', 'fao': 'fo', 'dv': 'div', 'rn': 'run', 'hin': 'hi', 'qu': 'que', 'hye': 'hy', 'guj': 'gu', 'kua': 'kj', 'cre': 'cr', 'div': 'dv', 'bam': 'bm', 'bak': 'ba', 'tel': 'te', 'mi': 'mri', 'za': 'zha', 'mh': 'mah', 'ara': 'ar', 'ce': 'che', 'nbl': 'nr', 'zu': 'zul', 'wa': 'wln', 'sun': 'su', 'abk': 'ab', 'kur': 'ku', 'wol': 'wo', 'lub': 'lu', 'gn': 'grn', 'lug': 'lg', 'jv': 'jav', 'nep': 'ne', 'ms': 'msa', 'iku': 'iu', 'lg': 'lug', 'wo': 'wol', 'tur': 'tr', 'mr': 'mar', 'tuk': 'tk', 'ja': 'jpn', 'cos': 'co', 'ile': 'ie', 'gla': 'gd', 'bos': 'bs', 'gle': 'ga', 'glg': 'gl', 'aka': 'ak', 'bod': 'bo', 'glv': 'gv', 'aa': 'aar', 'ch': 'cha', 'co': 'cos', 'vie': 'vi', 'ipk': 'ik', 'ca': 'cat', 'bs': 'bos', 'por': 'pt', 'uzb': 'uz', 'na': 'nau', 'pol': 'pl', 'cs': 'ces', 'tgk': 'tg', 'bre': 'br', 'cv': 'chv', 'tgl': 'tl', 'aym': 'ay', 'cha': 'ch', 'fra': 'fr', 'che': 'ce', 'pt': 'por', 'swa': 'sw', 'twi': 'tw', 'swe': 'sv', 'pa': 'pan', 'chu': 'cu', 'chv': 'cv', 'vi': 'vie', 'fry': 'fy', 'pi': 'pli', 'msa': 'ms', 'am': 'amh', 'hmo': 'ho', 'iii': 'ii', 'ml': 'mal', 'mg': 'mlg', 'mlg': 'mg', 'ibo': 'ig', 'hat': 'ht', 'slv': 'sl', 'mn': 'mon', 'xho': 'xh', 'deu': 'de', 'mk': 'mkd', 'cat': 'ca', 'mt': 'mlt', 'mlt': 'mt', 'slk': 'sk', 'ful': 'ff', 'my': 'mya', 'tat': 'tt', 've': 'ven', 'jpn': 'ja', 'vol': 'vo', 'oc': 'oci', 'is': 'isl', 'iu': 'iku', 'it': 'ita', 'vo': 'vol', 'ii': 'iii', 'mya': 'my', 'ik': 'ipk', 'io': 'ido', 'spa': 'es', 'ia': 'ina', 'ave': 'ae', 'tah': 'ty', 'ava': 'av', 'ig': 'ibo', 'yo': 'yor', 'eng': 'en', 'ie': 'ile', 'ewe': 'ee', 'id': 'ind', 'nya': 'ny', 'sin': 'si', 'pan': 'pa', 'snd': 'sd', 'mar': 'mr', 'sna': 'sn', 'kir': 'ky', 'kik': 'ki', 'fa': 'fas', 'kin': 'rw', 'ff': 'ful', 'lat': 'la', 'mah': 'mh', 'lav': 'lv', 'mal': 'ml', 'fo': 'fao', 'ss': 'ssw', 'sr': 'srp', 'sq': 'sqi', 'sw': 'swa', 'sv': 'swe', 'su': 'sun', 'st': 'sot', 'sk': 'slk', 'epo': 'eo', 'si': 'sin', 'so': 'som', 'sn': 'sna', 'sm': 'smo', 'sl': 'slv', 'sc': 'srd', 'sa': 'san', 'ido': 'io', 'sg': 'sag', 'nb': 'nob', 'tha': 'th', 'sd': 'snd', 'ita': 'it', 'tsn': 'tn', 'tso': 'ts', 'lb': 'ltz', 'ell': 'el', 'la': 'lat', 'ln': 'lin', 'lo': 'lao', 'li': 'lim', 'lv': 'lav', 'lt': 'lit', 'lu': 'lub', 'fij': 'fj', 'fin': 'fi', 'hau': 'ha', 'eus': 'eu', 'yi': 'yid', 'amh': 'am', 'bih': 'bh', 'dan': 'da', 'nob': 'nb', 'ces': 'cs', 'mon': 'mn', 'bis': 'bi', 'nor': 'no', 'cy': 'cym', 'afr': 'af', 'el': 'ell', 'eo': 'epo', 'en': 'eng', 'ee': 'ewe', 'fr': 'fra', 'lao': 'lo', 'cr': 'cre', 'eu': 'eus', 'et': 'est', 'es': 'spa', 'ru': 'rus', 'est': 'et', 'smo': 'sm', 'cu': 'chu', 'fy': 'fry', 'rm': 'roh', 'sme': 'se', 'ro': 'ron', 'be': 'bel', 'bg': 'bul', 'run': 'rn', 'ba': 'bak', 'ps': 'pus', 'bm': 'bam', 'bn': 'ben', 'bo': 'bod', 'bh': 'bih', 'bi': 'bis', 'orm': 'om', 'que': 'qu', 'br': 'bre', 'ori': 'or', 'rus': 'ru', 'pli': 'pi', 'pus': 'ps', 'om': 'orm', 'oj': 'oji', 'srd': 'sc', 'ltz': 'lb', 'nde': 'nd', 'dzo': 'dz', 'ndo': 'ng', 'srp': 'sr', 'wln': 'wa', 'isl': 'is', 'os': 'oss', 'or': 'ori', 'zul': 'zu', 'xh': 'xho', 'som': 'so', 'sot': 'st', 'fi': 'fin', 'zh': 'zho', 'fj': 'fij', 'yid': 'yi', 'mkd': 'mk', 'kom': 'kv', 'her': 'hz', 'kon': 'kg', 'ukr': 'uk', 'ton': 'to', 'heb': 'he', 'kor': 'ko', 'hz': 'her', 'hy': 'hye', 'hr': 'hrv', 'hun': 'hu', 'ht': 'hat', 'hu': 'hun', 'hi': 'hin', 'ho': 'hmo', 'bul': 'bg', 'ha': 'hau', 'cym': 'cy', 'he': 'heb', 'ben': 'bn', 'bel': 'be', 'uz': 'uzb', 'azb': 'az', 'aze': 'az', 'ur': 'urd', 'zha': 'za', 'pl': 'pol', 'uk': 'ukr', 'aar': 'aa', 'ug': 'uig', 'zho': 'zh', 'nno': 'nn', 'ab': 'abk', 'ae': 'ave', 'san': 'sa', 'uig': 'ug', 'af': 'afr', 'ak': 'aka', 'arg': 'an', 'sag': 'sg', 'an': 'arg', 'as': 'asm', 'ar': 'ara', 'khm': 'km', 'av': 'ava', 'ind': 'id', 'az': 'aze', 'ina': 'ia', 'asm': 'as', 'nl': 'nld', 'nn': 'nno', 'no': 'nor', 'lim': 'li', 'lin': 'ln', 'nd': 'nde', 'ne': 'nep', 'tir': 'ti', 'ng': 'ndo', 'lit': 'lt', 'ny': 'nya', 'nav': 'nv', 'nau': 'na', 'grn': 'gn', 'nr': 'nbl', 'yor': 'yo', 'nv': 'nav', 'kv': 'kom', 'tam': 'ta', 'cor': 'kw', 'kan': 'kn', 'kal': 'kl', 'kas': 'ks', 'sqi': 'sq', 'rw': 'kin', 'kau': 'kr', 'kat': 'ka', 'kaz': 'kk', 'urd': 'ur', 'ka': 'kat', 'kg': 'kon', 'kk': 'kaz', 'kj': 'kua', 'ki': 'kik', 'ko': 'kor', 'kn': 'kan', 'km': 'khm', 'kl': 'kal', 'ks': 'kas', 'kr': 'kau', 'kw': 'cor', 'mri': 'mi', 'ku': 'kur', 'ky': 'kir', 'hbs': 'sh', 'sh': 'hbs'}  # noqa: E501
organization_name = 'apertium'
default_prefix = 'apertium'
default_email = 'apertium-stuff@lists.sourceforge.net'


def get_lang_name(code):  # type: (str) -> str
    code = iso639_codes[code] if len(code) > 2 and code in iso639_codes else code
    if code in english_lang_names:
        return english_lang_names[code]
    else:
        sys.stdout.write('Unable to find English language name for %s, using ISO code instead.\n' % code)
        return code


def init_pair(args, email):  # type: (argparse.Namespace, str) -> Tuple[Dict[str, bytes], Dict[str, str], List[str]]
    language_code_1, language_code_2 = args.name.split('-')
    replacements = {
        'languageCode1': language_code_1,
        'languageCode2': language_code_2,
        'languageName1': get_lang_name(language_code_1),
        'languageName2': get_lang_name(language_code_2),
        'email': email,
    }

    if args.analyser == 'hfst' or (args.analyser1 == 'hfst' and args.analyser2 == 'hfst'):
        conditionals = ['hfst', 'hfst1', 'hfst2']
    elif args.analyser1 == 'hfst' and args.analyser2 in ['lt', 'lttoolbox']:
        conditionals = ['hfst', 'hfst1', 'lttoolbox2']
    elif args.analyser1 in ['lt', 'lttoolbox'] and args.analyser2 == 'hfst':
        conditionals = ['hfst', 'lttoolbox1', 'hfst2']
    else:
        conditionals = ['lttoolbox1', 'lttoolbox2']

    if not args.no_prob1:
        conditionals.append('prob1')
    if not args.no_prob2:
        conditionals.append('prob2')

    if not args.no_rlx1:
        conditionals.append('rlx1')
    if not args.no_rlx2:
        conditionals.append('rlx2')

    if not args.no_pgen1:
        conditionals.append('pgen1')
    if not args.no_pgen2:
        conditionals.append('pgen2')

    files = dict(bilingual_module_files, **any_module_files)
    return files, replacements, conditionals


def init_lang_module(args, email):  # type: (argparse.Namespace, str) -> Tuple[Dict[str, bytes], Dict[str, str], List[str]]
    replacements = {
        'languageCode': args.name,
        'languageName': get_lang_name(args.name),
        'email': email,
    }

    conditionals = []

    if args.analyser in ['lt', 'lttoolbox']:
        files = dict(lttoolbox_language_module_files, **any_module_files)
    elif args.analyser == 'hfst':
        files = dict(hfst_language_module_files, **any_module_files)
        if args.with_twoc:
            conditionals.append('twoc')
        else:
            del files['apertium-{{languageCode}}.{{languageCode}}.twoc']
    else:
        raise Exception('Unrecognized analyser: ' % args.analyser)

    return files, replacements, conditionals


def make_replacements(s, replacements, conditionals):  # type: (str, Dict[str, str], List[str]) -> str
    for _ in range(2):
        s = re.sub(r'{{if_(\w+)[^\n]*(.*?)\nif_\1}}', lambda x: x.group(2) if x.group(1) in conditionals else '', s, flags=re.DOTALL)
        s = re.sub(r'{{ifnot_(\w+)[^\n]*(.*?)\nifnot_\1}}', lambda x: x.group(2) if x.group(1) not in conditionals else '', s, flags=re.DOTALL)
    for replacement_name, replacement_value in replacements.items():
        s = s.replace('{{%s}}' % replacement_name, replacement_value)
    return s


def make_all_replacements(destination, files, replacements, conditionals):  # type: (str, Dict[str, bytes], Dict[str, str], List[str]) -> None
    for filename, encoded_file in files.items():
        path = os.path.join(destination, make_replacements(filename, replacements, conditionals))
        folder = os.path.dirname(path)
        if not os.path.isdir(folder):
            os.mkdir(folder)
        with open(path, 'wb') as f:
            decomp = zlib.decompress(base64.b85decode(encoded_file))
            try:
                f.write(make_replacements(str(decomp, encoding='utf-8'), replacements, conditionals).encode('utf-8'))
            except UnicodeDecodeError:  # binary file
                f.write(decomp)


def push_to_github(args, folder, username):  # type: (argparse.Namespace, str, str) -> None
    remote_name = 'origin'
    repository_name = '{}-{}'.format(args.prefix, args.name)
    if '-' in args.name:
        code1, code2 = args.name.split('-')
        description = 'Apertium translation pair for {} and {}'.format(get_lang_name(code1), get_lang_name(code2))
    else:
        description = 'Apertium linguistic data for {}'.format(get_lang_name(args.name))

    def create_github_repository():  # type: () -> http.client.HTTPResponse
        password = getpass.getpass(prompt='GitHub Password ({}): '.format(username))
        data = bytes(json.dumps({
            'name': repository_name,
            'description': description,
        }), encoding='utf-8')
        req = urllib.request.Request('https://api.github.com/orgs/{}/repos'.format(organization_name), data=data)
        credentials = '{}:{}'.format(username, password)
        encoded_credentials = base64.b64encode(credentials.encode('ascii'))
        req.add_header('Authorization', 'Basic {}'.format(encoded_credentials.decode('ascii')))
        try:
            response = urllib.request.urlopen(req)
            print('Successfully created GitHub repository {}/{}.'.format(organization_name, repository_name))
            return response  # type: ignore
        except urllib.error.HTTPError as e:  # type: ignore
            if e.getcode() == 401:
                print('Authentication failed. Retrying...')
                return create_github_repository()
            else:
                sys.stderr.write('Failed to create GitHub repository: {}.'.format(e))
                sys.exit(-1)

    response = create_github_repository()
    body = json.loads(response.read().decode('utf-8'))

    try:
        remote_url = body['ssh_url']
        subprocess.check_output(shlex.split('git remote add {} {}'.format(remote_name, remote_url)), cwd=args.destination, stderr=subprocess.STDOUT)
        print('Added GitHub remote {}.'.format(remote_url))
    except subprocess.CalledProcessError as e:
        sys.stderr.write('Adding remote {} ({}) failed: {}'.format(remote_name, remote_url, e.output))

    try:
        subprocess.check_output(shlex.split('git push {} master'.format(remote_name)), cwd=args.destination, stderr=subprocess.STDOUT)
        print('Pushed to GitHub. Visit your new repository at {}.'.format(body['html_url']))
    except subprocess.CalledProcessError as e:
        sys.stderr.write('Pushing to remote %s failed: {}'.format(remote_name, e.output))


def main(cli_args):  # type: (List[str]) -> None
    parser = argparse.ArgumentParser(description='Bootstrap an Apertium language module/pair')
    parser.add_argument('name', help='name of new Apertium language module/pair using ISO-639-3 language code(s)')
    parser.add_argument('-d', '--destination', help='destination directory for new language module/pair (default: cwd)', default=os.getcwd())
    parser.add_argument('-p', '--push-new-to-github', help='push newly created repository to incubator on the Apertium organisation on GitHub (use with -u)',
                        action='store_true', default=False)
    parser.add_argument('-pe', '--push-existing-to-github', help='push existing repository to incubator on the Apertium organisation on GitHub', default=None)
    parser.add_argument('-u', '--username', help='override GitHub username (for pushing repository to GitHub); otherwise git config is used', default=None)
    parser.add_argument('--prefix', help='directory prefix (default: {})'.format(default_prefix), default=default_prefix)

    parser.add_argument('-a', '--analyser', help='analyser to use for all languages', choices=['lt', 'lttoolbox', 'hfst'], default='lt')
    parser.add_argument('-a1', '--analyser1', help='analyser to use for first language of pair', choices=['lt', 'lttoolbox', 'hfst'], default='lt')
    parser.add_argument('-a2', '--analyser2', help='analyser to use for second language of pair', choices=['lt', 'lttoolbox', 'hfst'], default='lt')

    rlx_prob_group1 = parser.add_mutually_exclusive_group()
    rlx_prob_group1.add_argument('--no-rlx1', help='no .rlx present in first language of pair (only used for bilingual pair)',
                                 action='store_true', default=False)
    rlx_prob_group1.add_argument('--no-prob1', help='no .prob present in first language of pair (only used for bilingual pair)',
                                 action='store_true', default=False)

    rlx_prob_group2 = parser.add_mutually_exclusive_group()
    rlx_prob_group2.add_argument('--no-prob2', help='no .prob present in second language of pair (only used for bilingual pair)',
                                 action='store_true', default=False)
    rlx_prob_group2.add_argument('--no-rlx2', help='no .rlx present in second language of pair (only used for bilingual pair)',
                                 action='store_true', default=False)

    parser.add_argument('--no-pgen1', help='no post-dix present in first language of pair (only used for bilingual pair)', action='store_true', default=False)
    parser.add_argument('--no-pgen2', help='no post-dix present in second language of pair (only used for bilingual pair)', action='store_true', default=False)
    parser.add_argument('--with-twoc', help='include .twoc file (only used for monolingual hfst modules)', action='store_true', default=False)

    args = parser.parse_args(cli_args)

    if args.analyser in ['lt', 'lttoolbox'] and args.with_twoc:
        parser.error('--with-twoc can only be used in hfst modules')

    try:
        email = subprocess.check_output(shlex.split('git config user.email')).decode('utf-8').strip()
    except subprocess.CalledProcessError as e:
        email = default_email
        sys.stderr.write('Unable to get email, defaulting to %s: %s\n' % (email, str(e).strip()))

    username = args.username or email
    args.name = re.sub(r'^{}-'.format(re.escape(args.prefix)), '', args.name)
    repository_name = '{}-{}'.format(args.prefix, args.name)
    args.destination = os.path.join(args.destination, repository_name)

    if args.push_existing_to_github:
        if not os.path.isdir(args.push_existing_to_github):
            parser.error('--push_existing_to_github requires an existing directory')
        push_to_github(args, args.destination, username)
        return

    if '-' in args.name and args.name.count('-') == 1:
        files, replacements, conditionals = init_pair(args, email)
    elif '-' not in args.name:
        files, replacements, conditionals = init_lang_module(args, email)
    else:
        parser.error('Invalid language module name: %s' % args.name)

    if os.path.exists(args.destination):
        sys.stderr.write('Directory {} already exists, quitting.\n'.format(args.destination))
        sys.exit(-1)
    else:
        os.makedirs(args.destination)

    make_all_replacements(args.destination, files, replacements, conditionals)

    autogen_path = os.path.join(args.destination, 'autogen.sh')
    os.chmod(autogen_path, os.stat(autogen_path).st_mode | stat.S_IEXEC)

    try:
        readme_path = os.path.join(args.destination, 'README')
        if os.path.exists(readme_path):
            os.symlink('README', os.path.join(args.destination, 'README.md'))
    except OSError as err:  # e.g. on Windows without running as an admin
        sys.stderr.write('Unable to create symlink from README.md -> README: {}'.format(err))

    print('Successfully created %s.' % args.destination)

    try:
        subprocess.check_output(shlex.split('git init .'), cwd=args.destination, universal_newlines=True, stderr=subprocess.STDOUT)
        print('Initialized git repository {}.'.format(repository_name))
    except subprocess.CalledProcessError as e:
        sys.stderr.write('Unable to initialize git repository: {}'.format(e.output))
        sys.exit(-1)

    try:
        subprocess.check_output(shlex.split('git add .'), cwd=args.destination, universal_newlines=True, stderr=subprocess.STDOUT)
        subprocess.check_output(shlex.split('git commit -m "Initial commit"'), cwd=args.destination, universal_newlines=True, stderr=subprocess.STDOUT)
        print('Successfully added and committed files to git repository {}.'.format(repository_name))
    except subprocess.CalledProcessError as e:
        sys.stderr.write('Unable to add/commit files to git repository {}: {}'.format(repository_name, e.output))
        sys.exit(-1)

    if args.push_new_to_github:
        push_to_github(args, args.destination, username)
    else:
        print('To push your new local repository to incubator in the {} organisation on GitHub:'.format(organization_name))
        print('\tapertium-init.py -pe {} {}'.format(args.destination, repository_name))


if __name__ == '__main__':
    main(sys.argv[1:])
